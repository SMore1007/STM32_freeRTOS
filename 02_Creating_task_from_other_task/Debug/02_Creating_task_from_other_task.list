
02_Creating_task_from_other_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005084  08005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050ec  080050ec  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080050ec  080050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f4  080050f4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050f8  080050f8  000060f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080050fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  20000010  0800510c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  0800510c  00007a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017119  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003499  00000000  00000000  0001e159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  000215f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd9  00000000  00000000  00022a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c4e  00000000  00000000  00023a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179e5  00000000  00000000  00027687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db1f1  00000000  00000000  0003f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a25d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a8  00000000  00000000  0011a2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800506c 	.word	0x0800506c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800506c 	.word	0x0800506c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a2c      	ldr	r2, [pc, #176]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a25      	ldr	r2, [pc, #148]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b1f      	ldr	r3, [pc, #124]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a1e      	ldr	r2, [pc, #120]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_GPIO_Init+0xd0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	4812      	ldr	r0, [pc, #72]	@ (80005d4 <MX_GPIO_Init+0xd4>)
 800058c:	f000 fd34 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000596:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <MX_GPIO_Init+0xd8>)
 80005a8:	f000 fb92 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ac:	2320      	movs	r3, #32
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <MX_GPIO_Init+0xd4>)
 80005c4:	f000 fb84 	bl	8000cd0 <HAL_GPIO_Init>

}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	@ 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40020800 	.word	0x40020800

080005dc <main>:
typedef uint32_t TaskProfiler;

TaskProfiler BlueTaskProfiler,RedTaskProfiler,GreenTaskProfiler;

int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8
  HAL_Init();
 80005e2:	f000 fa51 	bl	8000a88 <HAL_Init>
  SystemClock_Config();
 80005e6:	f000 f857 	bl	8000698 <SystemClock_Config>
  MX_GPIO_Init();
 80005ea:	f7ff ff89 	bl	8000500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f9af 	bl	8000950 <MX_USART2_UART_Init>


  // Create a task
  xTaskCreate(vBlueLedControllerTask,
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2264      	movs	r2, #100	@ 0x64
 80005fe:	4904      	ldr	r1, [pc, #16]	@ (8000610 <main+0x34>)
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <main+0x38>)
 8000602:	f002 fee5 	bl	80033d0 <xTaskCreate>
			  NULL);



  // Manage the task using task scheduler
  vTaskStartScheduler();
 8000606:	f003 f829 	bl	800365c <vTaskStartScheduler>



  // Main while loop
  while (1)
 800060a:	bf00      	nop
 800060c:	e7fd      	b.n	800060a <main+0x2e>
 800060e:	bf00      	nop
 8000610:	08005084 	.word	0x08005084
 8000614:	08000619 	.word	0x08000619

08000618 <vBlueLedControllerTask>:


}

void vBlueLedControllerTask(void *pvParameters)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
 800061e:	6078      	str	r0, [r7, #4]
	  // Create a task
	  xTaskCreate(vRedLedControllerTask,
 8000620:	2300      	movs	r3, #0
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2301      	movs	r3, #1
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2264      	movs	r2, #100	@ 0x64
 800062c:	4909      	ldr	r1, [pc, #36]	@ (8000654 <vBlueLedControllerTask+0x3c>)
 800062e:	480a      	ldr	r0, [pc, #40]	@ (8000658 <vBlueLedControllerTask+0x40>)
 8000630:	f002 fece 	bl	80033d0 <xTaskCreate>
				  100,
				  NULL,
				  1,
				  NULL);
	  // Create a task
	  xTaskCreate(vGreenLedControllerTask,
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2301      	movs	r3, #1
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	2264      	movs	r2, #100	@ 0x64
 8000640:	4906      	ldr	r1, [pc, #24]	@ (800065c <vBlueLedControllerTask+0x44>)
 8000642:	4807      	ldr	r0, [pc, #28]	@ (8000660 <vBlueLedControllerTask+0x48>)
 8000644:	f002 fec4 	bl	80033d0 <xTaskCreate>
				  1,
				  NULL);
	while(1)
	{
//		printf("Blue LED Task\r\n");
		BlueTaskProfiler++;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <vBlueLedControllerTask+0x4c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <vBlueLedControllerTask+0x4c>)
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e7f9      	b.n	8000648 <vBlueLedControllerTask+0x30>
 8000654:	08005098 	.word	0x08005098
 8000658:	08000669 	.word	0x08000669
 800065c:	080050a8 	.word	0x080050a8
 8000660:	08000681 	.word	0x08000681
 8000664:	2000002c 	.word	0x2000002c

08000668 <vRedLedControllerTask>:

	}
}

void vRedLedControllerTask(void *pvParameters)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		printf("Red LED Task\r\n");
		RedTaskProfiler++;
 8000670:	4b02      	ldr	r3, [pc, #8]	@ (800067c <vRedLedControllerTask+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a01      	ldr	r2, [pc, #4]	@ (800067c <vRedLedControllerTask+0x14>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e7f9      	b.n	8000670 <vRedLedControllerTask+0x8>
 800067c:	20000030 	.word	0x20000030

08000680 <vGreenLedControllerTask>:
	}
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 8000688:	4b02      	ldr	r3, [pc, #8]	@ (8000694 <vGreenLedControllerTask+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a01      	ldr	r2, [pc, #4]	@ (8000694 <vGreenLedControllerTask+0x14>)
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	e7f9      	b.n	8000688 <vGreenLedControllerTask+0x8>
 8000694:	20000034 	.word	0x20000034

08000698 <SystemClock_Config>:
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
	return ch;
}

void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	@ 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fca6 	bl	8004ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <SystemClock_Config+0xd4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <SystemClock_Config+0xd4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xd8>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <SystemClock_Config+0xd8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000714:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000716:	2304      	movs	r3, #4
 8000718:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fffc 	bl	8001724 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000732:	f000 f831 	bl	8000798 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2102      	movs	r1, #2
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fc6a 	bl	800102c <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075e:	f000 f81b 	bl	8000798 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d101      	bne.n	800078a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000786:	f000 f9a1 	bl	8000acc <HAL_IncTick>
  }
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010000 	.word	0x40010000

08000798 <Error_Handler>:


void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  __disable_irq();
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_MspInit+0x54>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <HAL_MspInit+0x54>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_MspInit+0x54>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <HAL_MspInit+0x54>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <HAL_MspInit+0x54>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <HAL_MspInit+0x54>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	f06f 0001 	mvn.w	r0, #1
 80007ea:	f000 fa47 	bl	8000c7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <HAL_InitTick+0xd0>)
 8000812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000814:	4a2d      	ldr	r2, [pc, #180]	@ (80008cc <HAL_InitTick+0xd0>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6453      	str	r3, [r2, #68]	@ 0x44
 800081c:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <HAL_InitTick+0xd0>)
 800081e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000828:	f107 020c 	add.w	r2, r7, #12
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fd14 	bl	8001260 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000838:	f000 fcfe 	bl	8001238 <HAL_RCC_GetPCLK2Freq>
 800083c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000840:	4a23      	ldr	r2, [pc, #140]	@ (80008d0 <HAL_InitTick+0xd4>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	0c9b      	lsrs	r3, r3, #18
 8000848:	3b01      	subs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <HAL_InitTick+0xd8>)
 800084e:	4a22      	ldr	r2, [pc, #136]	@ (80008d8 <HAL_InitTick+0xdc>)
 8000850:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <HAL_InitTick+0xd8>)
 8000854:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000858:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800085a:	4a1e      	ldr	r2, [pc, #120]	@ (80008d4 <HAL_InitTick+0xd8>)
 800085c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <HAL_InitTick+0xd8>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <HAL_InitTick+0xd8>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <HAL_InitTick+0xd8>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000872:	4818      	ldr	r0, [pc, #96]	@ (80008d4 <HAL_InitTick+0xd8>)
 8000874:	f001 f9f4 	bl	8001c60 <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800087e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000882:	2b00      	cmp	r3, #0
 8000884:	d11b      	bne.n	80008be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000886:	4813      	ldr	r0, [pc, #76]	@ (80008d4 <HAL_InitTick+0xd8>)
 8000888:	f001 fa44 	bl	8001d14 <HAL_TIM_Base_Start_IT>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000896:	2b00      	cmp	r3, #0
 8000898:	d111      	bne.n	80008be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800089a:	2019      	movs	r0, #25
 800089c:	f000 fa0a 	bl	8000cb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b0f      	cmp	r3, #15
 80008a4:	d808      	bhi.n	80008b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008a6:	2200      	movs	r2, #0
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	2019      	movs	r0, #25
 80008ac:	f000 f9e6 	bl	8000c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b0:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <HAL_InitTick+0xe0>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	e002      	b.n	80008be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3730      	adds	r7, #48	@ 0x30
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	431bde83 	.word	0x431bde83
 80008d4:	20000038 	.word	0x20000038
 80008d8:	40010000 	.word	0x40010000
 80008dc:	20000004 	.word	0x20000004

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <UsageFault_Handler+0x4>

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800091c:	4802      	ldr	r0, [pc, #8]	@ (8000928 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800091e:	f001 fa69 	bl	8001df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000038 	.word	0x20000038

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <MX_USART2_UART_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000988:	f001 fc0c 	bl	80021a4 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000992:	f7ff ff01 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000080 	.word	0x20000080
 80009a0:	40004400 	.word	0x40004400

080009a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12b      	bne.n	8000a1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009fe:	230c      	movs	r3, #12
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1a:	f000 f959 	bl	8000cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a38:	f7ff ff78 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	@ (8000a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	@ (8000a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f004 fad1 	bl	8005008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff fdb9 	bl	80005dc <main>
  bx  lr    
 8000a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a78:	080050fc 	.word	0x080050fc
  ldr r2, =_sbss
 8000a7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a80:	20004a18 	.word	0x20004a18

08000a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <HAL_Init+0x40>)
 8000a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_Init+0x40>)
 8000a9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <HAL_Init+0x40>)
 8000aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f8d8 	bl	8000c66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	f7ff fea0 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe72 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023c00 	.word	0x40023c00

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008
 8000af0:	200000c8 	.word	0x200000c8

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200000c8 	.word	0x200000c8

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	@ (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	@ (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	@ 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff4c 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8e:	f7ff ff61 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	6978      	ldr	r0, [r7, #20]
 8000c9a:	f7ff ffb1 	bl	8000c00 <NVIC_EncodePriority>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff80 	bl	8000bac <__NVIC_SetPriority>
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff54 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e165      	b.n	8000fb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	f040 8154 	bne.w	8000fb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d005      	beq.n	8000d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d130      	bne.n	8000d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	091b      	lsrs	r3, r3, #4
 8000d6e:	f003 0201 	and.w	r2, r3, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d017      	beq.n	8000dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d123      	bne.n	8000e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	691a      	ldr	r2, [r3, #16]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	08da      	lsrs	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	69b9      	ldr	r1, [r7, #24]
 8000e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0203 	and.w	r2, r3, #3
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80ae 	beq.w	8000fb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd0 <HAL_GPIO_Init+0x300>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5e:	4a5c      	ldr	r2, [pc, #368]	@ (8000fd0 <HAL_GPIO_Init+0x300>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e66:	4b5a      	ldr	r3, [pc, #360]	@ (8000fd0 <HAL_GPIO_Init+0x300>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e72:	4a58      	ldr	r2, [pc, #352]	@ (8000fd4 <HAL_GPIO_Init+0x304>)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd8 <HAL_GPIO_Init+0x308>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d025      	beq.n	8000eea <HAL_GPIO_Init+0x21a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8000fdc <HAL_GPIO_Init+0x30c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01f      	beq.n	8000ee6 <HAL_GPIO_Init+0x216>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8000fe0 <HAL_GPIO_Init+0x310>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x212>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe4 <HAL_GPIO_Init+0x314>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x20e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8000fe8 <HAL_GPIO_Init+0x318>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x20a>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8000fec <HAL_GPIO_Init+0x31c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x206>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a49      	ldr	r2, [pc, #292]	@ (8000ff0 <HAL_GPIO_Init+0x320>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x202>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00c      	b.n	8000eec <HAL_GPIO_Init+0x21c>
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	e00a      	b.n	8000eec <HAL_GPIO_Init+0x21c>
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e008      	b.n	8000eec <HAL_GPIO_Init+0x21c>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x21c>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x21c>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x21c>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x21c>
 8000eea:	2300      	movs	r3, #0
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	f002 0203 	and.w	r2, r2, #3
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efc:	4935      	ldr	r1, [pc, #212]	@ (8000fd4 <HAL_GPIO_Init+0x304>)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff4 <HAL_GPIO_Init+0x324>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2e:	4a31      	ldr	r2, [pc, #196]	@ (8000ff4 <HAL_GPIO_Init+0x324>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <HAL_GPIO_Init+0x324>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f58:	4a26      	ldr	r2, [pc, #152]	@ (8000ff4 <HAL_GPIO_Init+0x324>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f5e:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <HAL_GPIO_Init+0x324>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <HAL_GPIO_Init+0x324>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <HAL_GPIO_Init+0x324>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fac:	4a11      	ldr	r2, [pc, #68]	@ (8000ff4 <HAL_GPIO_Init+0x324>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	f67f ae96 	bls.w	8000cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3724      	adds	r7, #36	@ 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020c00 	.word	0x40020c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40021400 	.word	0x40021400
 8000ff0:	40021800 	.word	0x40021800
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001014:	e003      	b.n	800101e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	619a      	str	r2, [r3, #24]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0cc      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001040:	4b68      	ldr	r3, [pc, #416]	@ (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d90c      	bls.n	8001068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104e:	4b65      	ldr	r3, [pc, #404]	@ (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001056:	4b63      	ldr	r3, [pc, #396]	@ (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d001      	beq.n	8001068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0b8      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d020      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001080:	4b59      	ldr	r3, [pc, #356]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a58      	ldr	r2, [pc, #352]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800108a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001098:	4b53      	ldr	r3, [pc, #332]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a52      	ldr	r2, [pc, #328]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a4:	4b50      	ldr	r3, [pc, #320]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	494d      	ldr	r1, [pc, #308]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d044      	beq.n	800114c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d107      	bne.n	80010da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	4b47      	ldr	r3, [pc, #284]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d119      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e07f      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d003      	beq.n	80010ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d107      	bne.n	80010fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ea:	4b3f      	ldr	r3, [pc, #252]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e06f      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fa:	4b3b      	ldr	r3, [pc, #236]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e067      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110a:	4b37      	ldr	r3, [pc, #220]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f023 0203 	bic.w	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4934      	ldr	r1, [pc, #208]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	4313      	orrs	r3, r2
 800111a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800111c:	f7ff fcea 	bl	8000af4 <HAL_GetTick>
 8001120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001122:	e00a      	b.n	800113a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001124:	f7ff fce6 	bl	8000af4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001132:	4293      	cmp	r3, r2
 8001134:	d901      	bls.n	800113a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e04f      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 020c 	and.w	r2, r3, #12
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	429a      	cmp	r2, r3
 800114a:	d1eb      	bne.n	8001124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800114c:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d20c      	bcs.n	8001174 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e032      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	4916      	ldr	r1, [pc, #88]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	4313      	orrs	r3, r2
 8001190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	490e      	ldr	r1, [pc, #56]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011b2:	f000 f887 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 80011b6:	4602      	mov	r2, r0
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	490a      	ldr	r1, [pc, #40]	@ (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	5ccb      	ldrb	r3, [r1, r3]
 80011c6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ca:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fb12 	bl	80007fc <HAL_InitTick>

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00
 80011e8:	40023800 	.word	0x40023800
 80011ec:	080050d4 	.word	0x080050d4
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_RCC_GetHCLKFreq+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000

08001210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001214:	f7ff fff0 	bl	80011f8 <HAL_RCC_GetHCLKFreq>
 8001218:	4602      	mov	r2, r0
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	0a9b      	lsrs	r3, r3, #10
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	4903      	ldr	r1, [pc, #12]	@ (8001234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001226:	5ccb      	ldrb	r3, [r1, r3]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	080050e4 	.word	0x080050e4

08001238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800123c:	f7ff ffdc 	bl	80011f8 <HAL_RCC_GetHCLKFreq>
 8001240:	4602      	mov	r2, r0
 8001242:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	0b5b      	lsrs	r3, r3, #13
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	4903      	ldr	r1, [pc, #12]	@ (800125c <HAL_RCC_GetPCLK2Freq+0x24>)
 800124e:	5ccb      	ldrb	r3, [r1, r3]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001254:	4618      	mov	r0, r3
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	080050e4 	.word	0x080050e4

08001260 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	220f      	movs	r2, #15
 800126e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_RCC_GetClockConfig+0x5c>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0203 	and.w	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_RCC_GetClockConfig+0x5c>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_RCC_GetClockConfig+0x5c>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_RCC_GetClockConfig+0x5c>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012a2:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <HAL_RCC_GetClockConfig+0x60>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 020f 	and.w	r2, r3, #15
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012c8:	b0ae      	sub	sp, #184	@ 0xb8
 80012ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ea:	4bcb      	ldr	r3, [pc, #812]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	f200 8206 	bhi.w	8001704 <HAL_RCC_GetSysClockFreq+0x440>
 80012f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001300 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001335 	.word	0x08001335
 8001304:	08001705 	.word	0x08001705
 8001308:	08001705 	.word	0x08001705
 800130c:	08001705 	.word	0x08001705
 8001310:	0800133d 	.word	0x0800133d
 8001314:	08001705 	.word	0x08001705
 8001318:	08001705 	.word	0x08001705
 800131c:	08001705 	.word	0x08001705
 8001320:	08001345 	.word	0x08001345
 8001324:	08001705 	.word	0x08001705
 8001328:	08001705 	.word	0x08001705
 800132c:	08001705 	.word	0x08001705
 8001330:	08001535 	.word	0x08001535
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001334:	4bb9      	ldr	r3, [pc, #740]	@ (800161c <HAL_RCC_GetSysClockFreq+0x358>)
 8001336:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800133a:	e1e7      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800133c:	4bb8      	ldr	r3, [pc, #736]	@ (8001620 <HAL_RCC_GetSysClockFreq+0x35c>)
 800133e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001342:	e1e3      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001344:	4bb4      	ldr	r3, [pc, #720]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800134c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001350:	4bb1      	ldr	r3, [pc, #708]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d071      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800135c:	4bae      	ldr	r3, [pc, #696]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	2200      	movs	r2, #0
 8001364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001368:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800136c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001374:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800137e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001382:	4622      	mov	r2, r4
 8001384:	462b      	mov	r3, r5
 8001386:	f04f 0000 	mov.w	r0, #0
 800138a:	f04f 0100 	mov.w	r1, #0
 800138e:	0159      	lsls	r1, r3, #5
 8001390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001394:	0150      	lsls	r0, r2, #5
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4621      	mov	r1, r4
 800139c:	1a51      	subs	r1, r2, r1
 800139e:	6439      	str	r1, [r7, #64]	@ 0x40
 80013a0:	4629      	mov	r1, r5
 80013a2:	eb63 0301 	sbc.w	r3, r3, r1
 80013a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80013b4:	4649      	mov	r1, r9
 80013b6:	018b      	lsls	r3, r1, #6
 80013b8:	4641      	mov	r1, r8
 80013ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013be:	4641      	mov	r1, r8
 80013c0:	018a      	lsls	r2, r1, #6
 80013c2:	4641      	mov	r1, r8
 80013c4:	1a51      	subs	r1, r2, r1
 80013c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80013c8:	4649      	mov	r1, r9
 80013ca:	eb63 0301 	sbc.w	r3, r3, r1
 80013ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80013dc:	4649      	mov	r1, r9
 80013de:	00cb      	lsls	r3, r1, #3
 80013e0:	4641      	mov	r1, r8
 80013e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013e6:	4641      	mov	r1, r8
 80013e8:	00ca      	lsls	r2, r1, #3
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	4622      	mov	r2, r4
 80013f2:	189b      	adds	r3, r3, r2
 80013f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80013f6:	462b      	mov	r3, r5
 80013f8:	460a      	mov	r2, r1
 80013fa:	eb42 0303 	adc.w	r3, r2, r3
 80013fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800140c:	4629      	mov	r1, r5
 800140e:	024b      	lsls	r3, r1, #9
 8001410:	4621      	mov	r1, r4
 8001412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001416:	4621      	mov	r1, r4
 8001418:	024a      	lsls	r2, r1, #9
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001422:	2200      	movs	r2, #0
 8001424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001428:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800142c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001430:	f7fe feee 	bl	8000210 <__aeabi_uldivmod>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4613      	mov	r3, r2
 800143a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800143e:	e067      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001440:	4b75      	ldr	r3, [pc, #468]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	2200      	movs	r2, #0
 8001448:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800144c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001450:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001458:	67bb      	str	r3, [r7, #120]	@ 0x78
 800145a:	2300      	movs	r3, #0
 800145c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800145e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001462:	4622      	mov	r2, r4
 8001464:	462b      	mov	r3, r5
 8001466:	f04f 0000 	mov.w	r0, #0
 800146a:	f04f 0100 	mov.w	r1, #0
 800146e:	0159      	lsls	r1, r3, #5
 8001470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001474:	0150      	lsls	r0, r2, #5
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4621      	mov	r1, r4
 800147c:	1a51      	subs	r1, r2, r1
 800147e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001480:	4629      	mov	r1, r5
 8001482:	eb63 0301 	sbc.w	r3, r3, r1
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001494:	4649      	mov	r1, r9
 8001496:	018b      	lsls	r3, r1, #6
 8001498:	4641      	mov	r1, r8
 800149a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800149e:	4641      	mov	r1, r8
 80014a0:	018a      	lsls	r2, r1, #6
 80014a2:	4641      	mov	r1, r8
 80014a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80014a8:	4649      	mov	r1, r9
 80014aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014c2:	4692      	mov	sl, r2
 80014c4:	469b      	mov	fp, r3
 80014c6:	4623      	mov	r3, r4
 80014c8:	eb1a 0303 	adds.w	r3, sl, r3
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	462b      	mov	r3, r5
 80014d0:	eb4b 0303 	adc.w	r3, fp, r3
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014e2:	4629      	mov	r1, r5
 80014e4:	028b      	lsls	r3, r1, #10
 80014e6:	4621      	mov	r1, r4
 80014e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014ec:	4621      	mov	r1, r4
 80014ee:	028a      	lsls	r2, r1, #10
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014f8:	2200      	movs	r2, #0
 80014fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80014fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80014fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001502:	f7fe fe85 	bl	8000210 <__aeabi_uldivmod>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4613      	mov	r3, r2
 800150c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001510:	4b41      	ldr	r3, [pc, #260]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	3301      	adds	r3, #1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001532:	e0eb      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001534:	4b38      	ldr	r3, [pc, #224]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800153c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001540:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d06b      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154c:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x354>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	2200      	movs	r2, #0
 8001554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001556:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800155a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800155e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001560:	2300      	movs	r3, #0
 8001562:	667b      	str	r3, [r7, #100]	@ 0x64
 8001564:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001568:	4622      	mov	r2, r4
 800156a:	462b      	mov	r3, r5
 800156c:	f04f 0000 	mov.w	r0, #0
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	0159      	lsls	r1, r3, #5
 8001576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800157a:	0150      	lsls	r0, r2, #5
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4621      	mov	r1, r4
 8001582:	1a51      	subs	r1, r2, r1
 8001584:	61b9      	str	r1, [r7, #24]
 8001586:	4629      	mov	r1, r5
 8001588:	eb63 0301 	sbc.w	r3, r3, r1
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800159a:	4659      	mov	r1, fp
 800159c:	018b      	lsls	r3, r1, #6
 800159e:	4651      	mov	r1, sl
 80015a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015a4:	4651      	mov	r1, sl
 80015a6:	018a      	lsls	r2, r1, #6
 80015a8:	4651      	mov	r1, sl
 80015aa:	ebb2 0801 	subs.w	r8, r2, r1
 80015ae:	4659      	mov	r1, fp
 80015b0:	eb63 0901 	sbc.w	r9, r3, r1
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015c8:	4690      	mov	r8, r2
 80015ca:	4699      	mov	r9, r3
 80015cc:	4623      	mov	r3, r4
 80015ce:	eb18 0303 	adds.w	r3, r8, r3
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	462b      	mov	r3, r5
 80015d6:	eb49 0303 	adc.w	r3, r9, r3
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015e8:	4629      	mov	r1, r5
 80015ea:	024b      	lsls	r3, r1, #9
 80015ec:	4621      	mov	r1, r4
 80015ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015f2:	4621      	mov	r1, r4
 80015f4:	024a      	lsls	r2, r1, #9
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015fe:	2200      	movs	r2, #0
 8001600:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001602:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001604:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001608:	f7fe fe02 	bl	8000210 <__aeabi_uldivmod>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4613      	mov	r3, r2
 8001612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001616:	e065      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x420>
 8001618:	40023800 	.word	0x40023800
 800161c:	00f42400 	.word	0x00f42400
 8001620:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001624:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <HAL_RCC_GetSysClockFreq+0x458>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	2200      	movs	r2, #0
 800162c:	4618      	mov	r0, r3
 800162e:	4611      	mov	r1, r2
 8001630:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001634:	653b      	str	r3, [r7, #80]	@ 0x50
 8001636:	2300      	movs	r3, #0
 8001638:	657b      	str	r3, [r7, #84]	@ 0x54
 800163a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800163e:	4642      	mov	r2, r8
 8001640:	464b      	mov	r3, r9
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	0159      	lsls	r1, r3, #5
 800164c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001650:	0150      	lsls	r0, r2, #5
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4641      	mov	r1, r8
 8001658:	1a51      	subs	r1, r2, r1
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	4649      	mov	r1, r9
 800165e:	eb63 0301 	sbc.w	r3, r3, r1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001670:	4659      	mov	r1, fp
 8001672:	018b      	lsls	r3, r1, #6
 8001674:	4651      	mov	r1, sl
 8001676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800167a:	4651      	mov	r1, sl
 800167c:	018a      	lsls	r2, r1, #6
 800167e:	4651      	mov	r1, sl
 8001680:	1a54      	subs	r4, r2, r1
 8001682:	4659      	mov	r1, fp
 8001684:	eb63 0501 	sbc.w	r5, r3, r1
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	00eb      	lsls	r3, r5, #3
 8001692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001696:	00e2      	lsls	r2, r4, #3
 8001698:	4614      	mov	r4, r2
 800169a:	461d      	mov	r5, r3
 800169c:	4643      	mov	r3, r8
 800169e:	18e3      	adds	r3, r4, r3
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	464b      	mov	r3, r9
 80016a4:	eb45 0303 	adc.w	r3, r5, r3
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016b6:	4629      	mov	r1, r5
 80016b8:	028b      	lsls	r3, r1, #10
 80016ba:	4621      	mov	r1, r4
 80016bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016c0:	4621      	mov	r1, r4
 80016c2:	028a      	lsls	r2, r1, #10
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016cc:	2200      	movs	r2, #0
 80016ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016d6:	f7fe fd9b 	bl	8000210 <__aeabi_uldivmod>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4613      	mov	r3, r2
 80016e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016e4:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <HAL_RCC_GetSysClockFreq+0x458>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	0f1b      	lsrs	r3, r3, #28
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80016f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001702:	e003      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800170a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800170c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001710:	4618      	mov	r0, r3
 8001712:	37b8      	adds	r7, #184	@ 0xb8
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	00f42400 	.word	0x00f42400

08001724 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e28d      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8083 	beq.w	800184a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001744:	4b94      	ldr	r3, [pc, #592]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b04      	cmp	r3, #4
 800174e:	d019      	beq.n	8001784 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001750:	4b91      	ldr	r3, [pc, #580]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
        || \
 8001758:	2b08      	cmp	r3, #8
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800175c:	4b8e      	ldr	r3, [pc, #568]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001768:	d00c      	beq.n	8001784 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176a:	4b8b      	ldr	r3, [pc, #556]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d112      	bne.n	800179c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4b88      	ldr	r3, [pc, #544]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001782:	d10b      	bne.n	800179c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	4b84      	ldr	r3, [pc, #528]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d05b      	beq.n	8001848 <HAL_RCC_OscConfig+0x124>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d157      	bne.n	8001848 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e25a      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x90>
 80017a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7b      	ldr	r2, [pc, #492]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e01d      	b.n	80017f0 <HAL_RCC_OscConfig+0xcc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0xb4>
 80017be:	4b76      	ldr	r3, [pc, #472]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a75      	ldr	r2, [pc, #468]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b73      	ldr	r3, [pc, #460]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a72      	ldr	r2, [pc, #456]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xcc>
 80017d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a6e      	ldr	r2, [pc, #440]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a6b      	ldr	r2, [pc, #428]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f97c 	bl	8000af4 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f978 	bl	8000af4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e21f      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b61      	ldr	r3, [pc, #388]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0xdc>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff f968 	bl	8000af4 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff f964 	bl	8000af4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e20b      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	4b57      	ldr	r3, [pc, #348]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x104>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06f      	beq.n	8001936 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001856:	4b50      	ldr	r3, [pc, #320]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b00      	cmp	r3, #0
 8001860:	d017      	beq.n	8001892 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001862:	4b4d      	ldr	r3, [pc, #308]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
        || \
 800186a:	2b08      	cmp	r3, #8
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800186e:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001886:	4b44      	ldr	r3, [pc, #272]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x186>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1d3      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4937      	ldr	r1, [pc, #220]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b34      	ldr	r3, [pc, #208]	@ (800199c <HAL_RCC_OscConfig+0x278>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff f911 	bl	8000af4 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff f90d 	bl	8000af4 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1b4      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4925      	ldr	r1, [pc, #148]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b24      	ldr	r3, [pc, #144]	@ (800199c <HAL_RCC_OscConfig+0x278>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f8f0 	bl	8000af4 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff f8ec 	bl	8000af4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e193      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d036      	beq.n	80019b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_RCC_OscConfig+0x27c>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff f8d0 	bl	8000af4 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff f8cc 	bl	8000af4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e173      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_RCC_OscConfig+0x274>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x234>
 8001976:	e01b      	b.n	80019b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_RCC_OscConfig+0x27c>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f8b9 	bl	8000af4 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e00e      	b.n	80019a4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff f8b5 	bl	8000af4 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d907      	bls.n	80019a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e15c      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
 8001998:	40023800 	.word	0x40023800
 800199c:	42470000 	.word	0x42470000
 80019a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a4:	4b8a      	ldr	r3, [pc, #552]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 80019a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ea      	bne.n	8001986 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8097 	beq.w	8001aec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c2:	4b83      	ldr	r3, [pc, #524]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	4b79      	ldr	r3, [pc, #484]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fa:	4b76      	ldr	r3, [pc, #472]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a75      	ldr	r2, [pc, #468]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b0>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f875 	bl	8000af4 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff f871 	bl	8000af4 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e118      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x31e>
 8001a34:	4b66      	ldr	r3, [pc, #408]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a38:	4a65      	ldr	r2, [pc, #404]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x358>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x340>
 8001a4a:	4b61      	ldr	r3, [pc, #388]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4e:	4a60      	ldr	r2, [pc, #384]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a56:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	4a5d      	ldr	r2, [pc, #372]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0x358>
 8001a64:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a68:	4a59      	ldr	r2, [pc, #356]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a70:	4b57      	ldr	r3, [pc, #348]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a74:	4a56      	ldr	r2, [pc, #344]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001a76:	f023 0304 	bic.w	r3, r3, #4
 8001a7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d015      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff f836 	bl	8000af4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f832 	bl	8000af4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0d7      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0ee      	beq.n	8001a8c <HAL_RCC_OscConfig+0x368>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f820 	bl	8000af4 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f81c 	bl	8000af4 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0c1      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	4b40      	ldr	r3, [pc, #256]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ee      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	4a3a      	ldr	r2, [pc, #232]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80ad 	beq.w	8001c50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af6:	4b36      	ldr	r3, [pc, #216]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d060      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d145      	bne.n	8001b96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <HAL_RCC_OscConfig+0x4b4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7fe fff0 	bl	8000af4 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7fe ffec 	bl	8000af4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e093      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	4b29      	ldr	r3, [pc, #164]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	019b      	lsls	r3, r3, #6
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	041b      	lsls	r3, r3, #16
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b60:	071b      	lsls	r3, r3, #28
 8001b62:	491b      	ldr	r1, [pc, #108]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_RCC_OscConfig+0x4b4>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6e:	f7fe ffc1 	bl	8000af4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b76:	f7fe ffbd 	bl	8000af4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e064      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x452>
 8001b94:	e05c      	b.n	8001c50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_RCC_OscConfig+0x4b4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7fe ffaa 	bl	8000af4 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7fe ffa6 	bl	8000af4 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e04d      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x480>
 8001bc2:	e045      	b.n	8001c50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e040      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <HAL_RCC_OscConfig+0x538>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d030      	beq.n	8001c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d129      	bne.n	8001c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d122      	bne.n	8001c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d119      	bne.n	8001c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	3b01      	subs	r3, #1
 8001c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d10f      	bne.n	8001c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e041      	b.n	8001cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f839 	bl	8001cfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f9c0 	bl	8002024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d001      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e04e      	b.n	8001dca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a23      	ldr	r2, [pc, #140]	@ (8001dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d022      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d56:	d01d      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d018      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <HAL_TIM_Base_Start_IT+0xd8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a18      	ldr	r2, [pc, #96]	@ (8001df0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d010      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db6:	e007      	b.n	8001dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40000c00 	.word	0x40000c00
 8001de8:	40010400 	.word	0x40010400
 8001dec:	40014000 	.word	0x40014000
 8001df0:	40001800 	.word	0x40001800

08001df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d020      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01b      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0202 	mvn.w	r2, #2
 8001e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8d2 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001e44:	e005      	b.n	8001e52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8c4 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8d5 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d020      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0204 	mvn.w	r2, #4
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8ac 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f89e 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8af 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d020      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0208 	mvn.w	r2, #8
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f886 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f878 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f889 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0210 	mvn.w	r2, #16
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2208      	movs	r2, #8
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f860 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f852 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f863 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0201 	mvn.w	r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fc0a 	bl	8000774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f906 	bl	8002190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f834 	bl	8002010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0220 	mvn.w	r2, #32
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8d8 	bl	800217c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a46      	ldr	r2, [pc, #280]	@ (8002150 <TIM_Base_SetConfig+0x12c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002042:	d00f      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a43      	ldr	r2, [pc, #268]	@ (8002154 <TIM_Base_SetConfig+0x130>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00b      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a42      	ldr	r2, [pc, #264]	@ (8002158 <TIM_Base_SetConfig+0x134>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a41      	ldr	r2, [pc, #260]	@ (800215c <TIM_Base_SetConfig+0x138>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a40      	ldr	r2, [pc, #256]	@ (8002160 <TIM_Base_SetConfig+0x13c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d108      	bne.n	8002076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800206a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a35      	ldr	r2, [pc, #212]	@ (8002150 <TIM_Base_SetConfig+0x12c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002084:	d027      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a32      	ldr	r2, [pc, #200]	@ (8002154 <TIM_Base_SetConfig+0x130>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d023      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a31      	ldr	r2, [pc, #196]	@ (8002158 <TIM_Base_SetConfig+0x134>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a30      	ldr	r2, [pc, #192]	@ (800215c <TIM_Base_SetConfig+0x138>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002160 <TIM_Base_SetConfig+0x13c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d017      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002164 <TIM_Base_SetConfig+0x140>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002168 <TIM_Base_SetConfig+0x144>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2c      	ldr	r2, [pc, #176]	@ (800216c <TIM_Base_SetConfig+0x148>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002170 <TIM_Base_SetConfig+0x14c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002174 <TIM_Base_SetConfig+0x150>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a29      	ldr	r2, [pc, #164]	@ (8002178 <TIM_Base_SetConfig+0x154>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d108      	bne.n	80020e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <TIM_Base_SetConfig+0x12c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0xf8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <TIM_Base_SetConfig+0x13c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f023 0201 	bic.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
  }
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00
 8002160:	40010400 	.word	0x40010400
 8002164:	40014000 	.word	0x40014000
 8002168:	40014400 	.word	0x40014400
 800216c:	40014800 	.word	0x40014800
 8002170:	40001800 	.word	0x40001800
 8002174:	40001c00 	.word	0x40001c00
 8002178:	40002000 	.word	0x40002000

0800217c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e042      	b.n	800223c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fbea 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	@ 0x24
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f82b 	bl	8002244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800220c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800221c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002248:	b0c0      	sub	sp, #256	@ 0x100
 800224a:	af00      	add	r7, sp, #0
 800224c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002260:	68d9      	ldr	r1, [r3, #12]
 8002262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	ea40 0301 	orr.w	r3, r0, r1
 800226c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800226e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	431a      	orrs	r2, r3
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	431a      	orrs	r2, r3
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800229c:	f021 010c 	bic.w	r1, r1, #12
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80022aa:	430b      	orrs	r3, r1
 80022ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80022ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022be:	6999      	ldr	r1, [r3, #24]
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	ea40 0301 	orr.w	r3, r0, r1
 80022ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002510 <UART_SetConfig+0x2cc>)
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d005      	beq.n	80022e4 <UART_SetConfig+0xa0>
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b8d      	ldr	r3, [pc, #564]	@ (8002514 <UART_SetConfig+0x2d0>)
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d104      	bne.n	80022ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022e4:	f7fe ffa8 	bl	8001238 <HAL_RCC_GetPCLK2Freq>
 80022e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80022ec:	e003      	b.n	80022f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ee:	f7fe ff8f 	bl	8001210 <HAL_RCC_GetPCLK1Freq>
 80022f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002300:	f040 810c 	bne.w	800251c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002308:	2200      	movs	r2, #0
 800230a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800230e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002312:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002316:	4622      	mov	r2, r4
 8002318:	462b      	mov	r3, r5
 800231a:	1891      	adds	r1, r2, r2
 800231c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800231e:	415b      	adcs	r3, r3
 8002320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002326:	4621      	mov	r1, r4
 8002328:	eb12 0801 	adds.w	r8, r2, r1
 800232c:	4629      	mov	r1, r5
 800232e:	eb43 0901 	adc.w	r9, r3, r1
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800233e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002346:	4690      	mov	r8, r2
 8002348:	4699      	mov	r9, r3
 800234a:	4623      	mov	r3, r4
 800234c:	eb18 0303 	adds.w	r3, r8, r3
 8002350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002354:	462b      	mov	r3, r5
 8002356:	eb49 0303 	adc.w	r3, r9, r3
 800235a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800235e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800236a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800236e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002372:	460b      	mov	r3, r1
 8002374:	18db      	adds	r3, r3, r3
 8002376:	653b      	str	r3, [r7, #80]	@ 0x50
 8002378:	4613      	mov	r3, r2
 800237a:	eb42 0303 	adc.w	r3, r2, r3
 800237e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002384:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002388:	f7fd ff42 	bl	8000210 <__aeabi_uldivmod>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4b61      	ldr	r3, [pc, #388]	@ (8002518 <UART_SetConfig+0x2d4>)
 8002392:	fba3 2302 	umull	r2, r3, r3, r2
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	011c      	lsls	r4, r3, #4
 800239a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800239e:	2200      	movs	r2, #0
 80023a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80023a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80023ac:	4642      	mov	r2, r8
 80023ae:	464b      	mov	r3, r9
 80023b0:	1891      	adds	r1, r2, r2
 80023b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80023b4:	415b      	adcs	r3, r3
 80023b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023bc:	4641      	mov	r1, r8
 80023be:	eb12 0a01 	adds.w	sl, r2, r1
 80023c2:	4649      	mov	r1, r9
 80023c4:	eb43 0b01 	adc.w	fp, r3, r1
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023dc:	4692      	mov	sl, r2
 80023de:	469b      	mov	fp, r3
 80023e0:	4643      	mov	r3, r8
 80023e2:	eb1a 0303 	adds.w	r3, sl, r3
 80023e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023ea:	464b      	mov	r3, r9
 80023ec:	eb4b 0303 	adc.w	r3, fp, r3
 80023f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002400:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002404:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002408:	460b      	mov	r3, r1
 800240a:	18db      	adds	r3, r3, r3
 800240c:	643b      	str	r3, [r7, #64]	@ 0x40
 800240e:	4613      	mov	r3, r2
 8002410:	eb42 0303 	adc.w	r3, r2, r3
 8002414:	647b      	str	r3, [r7, #68]	@ 0x44
 8002416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800241a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800241e:	f7fd fef7 	bl	8000210 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4611      	mov	r1, r2
 8002428:	4b3b      	ldr	r3, [pc, #236]	@ (8002518 <UART_SetConfig+0x2d4>)
 800242a:	fba3 2301 	umull	r2, r3, r3, r1
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2264      	movs	r2, #100	@ 0x64
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	1acb      	subs	r3, r1, r3
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800243e:	4b36      	ldr	r3, [pc, #216]	@ (8002518 <UART_SetConfig+0x2d4>)
 8002440:	fba3 2302 	umull	r2, r3, r3, r2
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800244c:	441c      	add	r4, r3
 800244e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002458:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800245c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002460:	4642      	mov	r2, r8
 8002462:	464b      	mov	r3, r9
 8002464:	1891      	adds	r1, r2, r2
 8002466:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002468:	415b      	adcs	r3, r3
 800246a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800246c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002470:	4641      	mov	r1, r8
 8002472:	1851      	adds	r1, r2, r1
 8002474:	6339      	str	r1, [r7, #48]	@ 0x30
 8002476:	4649      	mov	r1, r9
 8002478:	414b      	adcs	r3, r1
 800247a:	637b      	str	r3, [r7, #52]	@ 0x34
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002488:	4659      	mov	r1, fp
 800248a:	00cb      	lsls	r3, r1, #3
 800248c:	4651      	mov	r1, sl
 800248e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002492:	4651      	mov	r1, sl
 8002494:	00ca      	lsls	r2, r1, #3
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	4603      	mov	r3, r0
 800249c:	4642      	mov	r2, r8
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024a4:	464b      	mov	r3, r9
 80024a6:	460a      	mov	r2, r1
 80024a8:	eb42 0303 	adc.w	r3, r2, r3
 80024ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80024c4:	460b      	mov	r3, r1
 80024c6:	18db      	adds	r3, r3, r3
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024ca:	4613      	mov	r3, r2
 80024cc:	eb42 0303 	adc.w	r3, r2, r3
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80024da:	f7fd fe99 	bl	8000210 <__aeabi_uldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <UART_SetConfig+0x2d4>)
 80024e4:	fba3 1302 	umull	r1, r3, r3, r2
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	2164      	movs	r1, #100	@ 0x64
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	3332      	adds	r3, #50	@ 0x32
 80024f6:	4a08      	ldr	r2, [pc, #32]	@ (8002518 <UART_SetConfig+0x2d4>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	f003 0207 	and.w	r2, r3, #7
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4422      	add	r2, r4
 800250a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800250c:	e106      	b.n	800271c <UART_SetConfig+0x4d8>
 800250e:	bf00      	nop
 8002510:	40011000 	.word	0x40011000
 8002514:	40011400 	.word	0x40011400
 8002518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800251c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002520:	2200      	movs	r2, #0
 8002522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002526:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800252a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800252e:	4642      	mov	r2, r8
 8002530:	464b      	mov	r3, r9
 8002532:	1891      	adds	r1, r2, r2
 8002534:	6239      	str	r1, [r7, #32]
 8002536:	415b      	adcs	r3, r3
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
 800253a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800253e:	4641      	mov	r1, r8
 8002540:	1854      	adds	r4, r2, r1
 8002542:	4649      	mov	r1, r9
 8002544:	eb43 0501 	adc.w	r5, r3, r1
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	00eb      	lsls	r3, r5, #3
 8002552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002556:	00e2      	lsls	r2, r4, #3
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
 800255c:	4643      	mov	r3, r8
 800255e:	18e3      	adds	r3, r4, r3
 8002560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002564:	464b      	mov	r3, r9
 8002566:	eb45 0303 	adc.w	r3, r5, r3
 800256a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800256e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800257a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800258a:	4629      	mov	r1, r5
 800258c:	008b      	lsls	r3, r1, #2
 800258e:	4621      	mov	r1, r4
 8002590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002594:	4621      	mov	r1, r4
 8002596:	008a      	lsls	r2, r1, #2
 8002598:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800259c:	f7fd fe38 	bl	8000210 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4b60      	ldr	r3, [pc, #384]	@ (8002728 <UART_SetConfig+0x4e4>)
 80025a6:	fba3 2302 	umull	r2, r3, r3, r2
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	011c      	lsls	r4, r3, #4
 80025ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	1891      	adds	r1, r2, r2
 80025c6:	61b9      	str	r1, [r7, #24]
 80025c8:	415b      	adcs	r3, r3
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d0:	4641      	mov	r1, r8
 80025d2:	1851      	adds	r1, r2, r1
 80025d4:	6139      	str	r1, [r7, #16]
 80025d6:	4649      	mov	r1, r9
 80025d8:	414b      	adcs	r3, r1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e8:	4659      	mov	r1, fp
 80025ea:	00cb      	lsls	r3, r1, #3
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f2:	4651      	mov	r1, sl
 80025f4:	00ca      	lsls	r2, r1, #3
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	4642      	mov	r2, r8
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002604:	464b      	mov	r3, r9
 8002606:	460a      	mov	r2, r1
 8002608:	eb42 0303 	adc.w	r3, r2, r3
 800260c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	67bb      	str	r3, [r7, #120]	@ 0x78
 800261a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002628:	4649      	mov	r1, r9
 800262a:	008b      	lsls	r3, r1, #2
 800262c:	4641      	mov	r1, r8
 800262e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002632:	4641      	mov	r1, r8
 8002634:	008a      	lsls	r2, r1, #2
 8002636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800263a:	f7fd fde9 	bl	8000210 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4611      	mov	r1, r2
 8002644:	4b38      	ldr	r3, [pc, #224]	@ (8002728 <UART_SetConfig+0x4e4>)
 8002646:	fba3 2301 	umull	r2, r3, r3, r1
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2264      	movs	r2, #100	@ 0x64
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	1acb      	subs	r3, r1, r3
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	3332      	adds	r3, #50	@ 0x32
 8002658:	4a33      	ldr	r2, [pc, #204]	@ (8002728 <UART_SetConfig+0x4e4>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002664:	441c      	add	r4, r3
 8002666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800266a:	2200      	movs	r2, #0
 800266c:	673b      	str	r3, [r7, #112]	@ 0x70
 800266e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002670:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002674:	4642      	mov	r2, r8
 8002676:	464b      	mov	r3, r9
 8002678:	1891      	adds	r1, r2, r2
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	415b      	adcs	r3, r3
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002684:	4641      	mov	r1, r8
 8002686:	1851      	adds	r1, r2, r1
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	4649      	mov	r1, r9
 800268c:	414b      	adcs	r3, r1
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800269c:	4659      	mov	r1, fp
 800269e:	00cb      	lsls	r3, r1, #3
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026a6:	4651      	mov	r1, sl
 80026a8:	00ca      	lsls	r2, r1, #3
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	4642      	mov	r2, r8
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026b6:	464b      	mov	r3, r9
 80026b8:	460a      	mov	r2, r1
 80026ba:	eb42 0303 	adc.w	r3, r2, r3
 80026be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80026ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80026d8:	4649      	mov	r1, r9
 80026da:	008b      	lsls	r3, r1, #2
 80026dc:	4641      	mov	r1, r8
 80026de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e2:	4641      	mov	r1, r8
 80026e4:	008a      	lsls	r2, r1, #2
 80026e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80026ea:	f7fd fd91 	bl	8000210 <__aeabi_uldivmod>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <UART_SetConfig+0x4e4>)
 80026f4:	fba3 1302 	umull	r1, r3, r3, r2
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	2164      	movs	r1, #100	@ 0x64
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	3332      	adds	r3, #50	@ 0x32
 8002706:	4a08      	ldr	r2, [pc, #32]	@ (8002728 <UART_SetConfig+0x4e4>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	f003 020f 	and.w	r2, r3, #15
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4422      	add	r2, r4
 800271a:	609a      	str	r2, [r3, #8]
}
 800271c:	bf00      	nop
 800271e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002722:	46bd      	mov	sp, r7
 8002724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002728:	51eb851f 	.word	0x51eb851f

0800272c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002730:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <SysTick_Handler+0x1c>)
 8002732:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002734:	f001 fbe0 	bl	8003ef8 <xTaskGetSchedulerState>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800273e:	f002 f9db 	bl	8004af8 <xPortSysTickHandler>
  }
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a07      	ldr	r2, [pc, #28]	@ (8002778 <vApplicationGetIdleTaskMemory+0x2c>)
 800275c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4a06      	ldr	r2, [pc, #24]	@ (800277c <vApplicationGetIdleTaskMemory+0x30>)
 8002762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	200000cc 	.word	0x200000cc
 800277c:	20000128 	.word	0x20000128

08002780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <vApplicationGetTimerTaskMemory+0x2c>)
 8002790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4a06      	ldr	r2, [pc, #24]	@ (80027b0 <vApplicationGetTimerTaskMemory+0x30>)
 8002796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800279e:	601a      	str	r2, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	20000328 	.word	0x20000328
 80027b0:	20000384 	.word	0x20000384

080027b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f103 0208 	add.w	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f103 0208 	add.w	r2, r3, #8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f103 0208 	add.w	r2, r3, #8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d103      	bne.n	8002876 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e00c      	b.n	8002890 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3308      	adds	r3, #8
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e002      	b.n	8002884 <vListInsert+0x2e>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	429a      	cmp	r2, r3
 800288e:	d2f6      	bcs.n	800287e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6892      	ldr	r2, [r2, #8]
 80028de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6852      	ldr	r2, [r2, #4]
 80028e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d103      	bne.n	80028fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002948:	f002 f846 	bl	80049d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	68f9      	ldr	r1, [r7, #12]
 8002956:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	441a      	add	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	3b01      	subs	r3, #1
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	441a      	add	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	22ff      	movs	r2, #255	@ 0xff
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	22ff      	movs	r2, #255	@ 0xff
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d114      	bne.n	80029c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01a      	beq.n	80029dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3310      	adds	r3, #16
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 f8e4 	bl	8003b78 <xTaskRemoveFromEventList>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d012      	beq.n	80029dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029b6:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <xQueueGenericReset+0xd0>)
 80029b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	e009      	b.n	80029dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3310      	adds	r3, #16
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fef1 	bl	80027b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3324      	adds	r3, #36	@ 0x24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff feec 	bl	80027b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029dc:	f002 f82e 	bl	8004a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029e0:	2301      	movs	r3, #1
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	e000ed04 	.word	0xe000ed04

080029f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a16:	bf00      	nop
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	e7fd      	b.n	8002a36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <xQueueGenericCreateStatic+0x56>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <xQueueGenericCreateStatic+0x5a>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <xQueueGenericCreateStatic+0x5c>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	623b      	str	r3, [r7, #32]
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <xQueueGenericCreateStatic+0x84>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <xQueueGenericCreateStatic+0x88>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <xQueueGenericCreateStatic+0x8a>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10b      	bne.n	8002a96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	61fb      	str	r3, [r7, #28]
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	e7fd      	b.n	8002a92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a96:	2350      	movs	r3, #80	@ 0x50
 8002a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b50      	cmp	r3, #80	@ 0x50
 8002a9e:	d00b      	beq.n	8002ab8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	61bb      	str	r3, [r7, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ab8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002acc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f805 	bl	8002aea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3730      	adds	r7, #48	@ 0x30
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e002      	b.n	8002b0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b18:	2101      	movs	r1, #1
 8002b1a:	69b8      	ldr	r0, [r7, #24]
 8002b1c:	f7ff fefe 	bl	800291c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08e      	sub	sp, #56	@ 0x38
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <xQueueGenericSend+0x34>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d103      	bne.n	8002b72 <xQueueGenericSend+0x42>
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericSend+0x46>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <xQueueGenericSend+0x48>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <xQueueGenericSend+0x64>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d103      	bne.n	8002ba2 <xQueueGenericSend+0x72>
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <xQueueGenericSend+0x76>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueGenericSend+0x78>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <xQueueGenericSend+0x94>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	623b      	str	r3, [r7, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bc4:	f001 f998 	bl	8003ef8 <xTaskGetSchedulerState>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <xQueueGenericSend+0xa4>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <xQueueGenericSend+0xa8>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <xQueueGenericSend+0xaa>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <xQueueGenericSend+0xc6>
	__asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	61fb      	str	r3, [r7, #28]
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	e7fd      	b.n	8002bf2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bf6:	f001 feef 	bl	80049d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <xQueueGenericSend+0xdc>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d129      	bne.n	8002c60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c12:	f000 fa0f 	bl	8003034 <prvCopyDataToQueue>
 8002c16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	3324      	adds	r3, #36	@ 0x24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 ffa7 	bl	8003b78 <xTaskRemoveFromEventList>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c30:	4b3f      	ldr	r3, [pc, #252]	@ (8002d30 <xQueueGenericSend+0x200>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	e00a      	b.n	8002c58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c48:	4b39      	ldr	r3, [pc, #228]	@ (8002d30 <xQueueGenericSend+0x200>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c58:	f001 fef0 	bl	8004a3c <vPortExitCritical>
				return pdPASS;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e063      	b.n	8002d28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c66:	f001 fee9 	bl	8004a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e05c      	b.n	8002d28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 ffe1 	bl	8003c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c82:	f001 fedb 	bl	8004a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c86:	f000 fd51 	bl	800372c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c8a:	f001 fea5 	bl	80049d8 <vPortEnterCritical>
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d103      	bne.n	8002ca4 <xQueueGenericSend+0x174>
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002caa:	b25b      	sxtb	r3, r3
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d103      	bne.n	8002cba <xQueueGenericSend+0x18a>
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cba:	f001 febf 	bl	8004a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cbe:	1d3a      	adds	r2, r7, #4
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 ffd0 	bl	8003c6c <xTaskCheckForTimeOut>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d124      	bne.n	8002d1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cd4:	f000 faa6 	bl	8003224 <prvIsQueueFull>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce0:	3310      	adds	r3, #16
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fef4 	bl	8003ad4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cee:	f000 fa31 	bl	8003154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cf2:	f000 fd29 	bl	8003748 <xTaskResumeAll>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af7c 	bne.w	8002bf6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <xQueueGenericSend+0x200>)
 8002d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	e772      	b.n	8002bf6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d12:	f000 fa1f 	bl	8003154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d16:	f000 fd17 	bl	8003748 <xTaskResumeAll>
 8002d1a:	e76c      	b.n	8002bf6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d1e:	f000 fa19 	bl	8003154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d22:	f000 fd11 	bl	8003748 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3738      	adds	r7, #56	@ 0x38
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b090      	sub	sp, #64	@ 0x40
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <xQueueGenericSendFromISR+0x3e>
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <xQueueGenericSendFromISR+0x42>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <xQueueGenericSendFromISR+0x44>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d103      	bne.n	8002da2 <xQueueGenericSendFromISR+0x6e>
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <xQueueGenericSendFromISR+0x72>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <xQueueGenericSendFromISR+0x74>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10b      	bne.n	8002dc4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	623b      	str	r3, [r7, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dc4:	f001 fee8 	bl	8004b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dc8:	f3ef 8211 	mrs	r2, BASEPRI
 8002dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	61fa      	str	r2, [r7, #28]
 8002dde:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002de0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002de2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <xQueueGenericSendFromISR+0xc2>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d12f      	bne.n	8002e56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e0c:	f000 f912 	bl	8003034 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d112      	bne.n	8002e40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e24:	3324      	adds	r3, #36	@ 0x24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fea6 	bl	8003b78 <xTaskRemoveFromEventList>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00e      	beq.n	8002e50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e007      	b.n	8002e50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	b25a      	sxtb	r2, r3
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002e50:	2301      	movs	r3, #1
 8002e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002e54:	e001      	b.n	8002e5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3740      	adds	r7, #64	@ 0x40
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <xQueueReceive+0x32>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	623b      	str	r3, [r7, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	e7fd      	b.n	8002e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <xQueueReceive+0x40>
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <xQueueReceive+0x44>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <xQueueReceive+0x46>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <xQueueReceive+0x62>
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	61fb      	str	r3, [r7, #28]
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	e7fd      	b.n	8002ece <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ed2:	f001 f811 	bl	8003ef8 <xTaskGetSchedulerState>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <xQueueReceive+0x72>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <xQueueReceive+0x76>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <xQueueReceive+0x78>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <xQueueReceive+0x94>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	61bb      	str	r3, [r7, #24]
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f04:	f001 fd68 	bl	80049d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01f      	beq.n	8002f54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f18:	f000 f8f6 	bl	8003108 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	1e5a      	subs	r2, r3, #1
 8002f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00f      	beq.n	8002f4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	3310      	adds	r3, #16
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fe21 	bl	8003b78 <xTaskRemoveFromEventList>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <xQueueReceive+0x1c0>)
 8002f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f4c:	f001 fd76 	bl	8004a3c <vPortExitCritical>
				return pdPASS;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e069      	b.n	8003028 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f5a:	f001 fd6f 	bl	8004a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e062      	b.n	8003028 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fe67 	bl	8003c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f76:	f001 fd61 	bl	8004a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f7a:	f000 fbd7 	bl	800372c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f7e:	f001 fd2b 	bl	80049d8 <vPortEnterCritical>
 8002f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d103      	bne.n	8002f98 <xQueueReceive+0x128>
 8002f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f9e:	b25b      	sxtb	r3, r3
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d103      	bne.n	8002fae <xQueueReceive+0x13e>
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fae:	f001 fd45 	bl	8004a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fb2:	1d3a      	adds	r2, r7, #4
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fe56 	bl	8003c6c <xTaskCheckForTimeOut>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d123      	bne.n	800300e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fc8:	f000 f916 	bl	80031f8 <prvIsQueueEmpty>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d017      	beq.n	8003002 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	3324      	adds	r3, #36	@ 0x24
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fd7a 	bl	8003ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fe2:	f000 f8b7 	bl	8003154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fe6:	f000 fbaf 	bl	8003748 <xTaskResumeAll>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d189      	bne.n	8002f04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <xQueueReceive+0x1c0>)
 8002ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	e780      	b.n	8002f04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003004:	f000 f8a6 	bl	8003154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003008:	f000 fb9e 	bl	8003748 <xTaskResumeAll>
 800300c:	e77a      	b.n	8002f04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800300e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003010:	f000 f8a0 	bl	8003154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003014:	f000 fb98 	bl	8003748 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800301a:	f000 f8ed 	bl	80031f8 <prvIsQueueEmpty>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	f43f af6f 	beq.w	8002f04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003026:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003028:	4618      	mov	r0, r3
 800302a:	3730      	adds	r7, #48	@ 0x30
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	e000ed04 	.word	0xe000ed04

08003034 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003048:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10d      	bne.n	800306e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d14d      	bne.n	80030f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 ff68 	bl	8003f34 <xTaskPriorityDisinherit>
 8003064:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	e043      	b.n	80030f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d119      	bne.n	80030a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6858      	ldr	r0, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	461a      	mov	r2, r3
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	f001 ffe6 	bl	8005050 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	441a      	add	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d32b      	bcc.n	80030f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	e026      	b.n	80030f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68d8      	ldr	r0, [r3, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	461a      	mov	r2, r3
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	f001 ffcc 	bl	8005050 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	425b      	negs	r3, r3
 80030c2:	441a      	add	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d207      	bcs.n	80030e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	425b      	negs	r3, r3
 80030de:	441a      	add	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d105      	bne.n	80030f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80030fe:	697b      	ldr	r3, [r7, #20]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d018      	beq.n	800314c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	441a      	add	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d303      	bcc.n	800313c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68d9      	ldr	r1, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	461a      	mov	r2, r3
 8003146:	6838      	ldr	r0, [r7, #0]
 8003148:	f001 ff82 	bl	8005050 <memcpy>
	}
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800315c:	f001 fc3c 	bl	80049d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003166:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003168:	e011      	b.n	800318e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3324      	adds	r3, #36	@ 0x24
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fcfe 	bl	8003b78 <xTaskRemoveFromEventList>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003182:	f000 fdd7 	bl	8003d34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	3b01      	subs	r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	dce9      	bgt.n	800316a <prvUnlockQueue+0x16>
 8003196:	e000      	b.n	800319a <prvUnlockQueue+0x46>
					break;
 8003198:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	22ff      	movs	r2, #255	@ 0xff
 800319e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80031a2:	f001 fc4b 	bl	8004a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031a6:	f001 fc17 	bl	80049d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031b2:	e011      	b.n	80031d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3310      	adds	r3, #16
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fcd9 	bl	8003b78 <xTaskRemoveFromEventList>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031cc:	f000 fdb2 	bl	8003d34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031d0:	7bbb      	ldrb	r3, [r7, #14]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	dce9      	bgt.n	80031b4 <prvUnlockQueue+0x60>
 80031e0:	e000      	b.n	80031e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	22ff      	movs	r2, #255	@ 0xff
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80031ec:	f001 fc26 	bl	8004a3c <vPortExitCritical>
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003200:	f001 fbea 	bl	80049d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e001      	b.n	8003216 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003216:	f001 fc11 	bl	8004a3c <vPortExitCritical>

	return xReturn;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800322c:	f001 fbd4 	bl	80049d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	429a      	cmp	r2, r3
 800323a:	d102      	bne.n	8003242 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800323c:	2301      	movs	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e001      	b.n	8003246 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003246:	f001 fbf9 	bl	8004a3c <vPortExitCritical>

	return xReturn;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e014      	b.n	800328e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003264:	4a0f      	ldr	r2, [pc, #60]	@ (80032a4 <vQueueAddToRegistry+0x50>)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003270:	490c      	ldr	r1, [pc, #48]	@ (80032a4 <vQueueAddToRegistry+0x50>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800327a:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <vQueueAddToRegistry+0x50>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003286:	e006      	b.n	8003296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b07      	cmp	r3, #7
 8003292:	d9e7      	bls.n	8003264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000784 	.word	0x20000784

080032a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032b8:	f001 fb8e 	bl	80049d8 <vPortEnterCritical>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d103      	bne.n	80032d2 <vQueueWaitForMessageRestricted+0x2a>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d103      	bne.n	80032e8 <vQueueWaitForMessageRestricted+0x40>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032e8:	f001 fba8 	bl	8004a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3324      	adds	r3, #36	@ 0x24
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fc0f 	bl	8003b20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff26 	bl	8003154 <prvUnlockQueue>
	}
 8003308:	bf00      	nop
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08e      	sub	sp, #56	@ 0x38
 8003314:	af04      	add	r7, sp, #16
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800331e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	623b      	str	r3, [r7, #32]
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800333c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	61fb      	str	r3, [r7, #28]
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	e7fd      	b.n	8003356 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800335a:	235c      	movs	r3, #92	@ 0x5c
 800335c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b5c      	cmp	r3, #92	@ 0x5c
 8003362:	d00b      	beq.n	800337c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	61bb      	str	r3, [r7, #24]
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800337c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01e      	beq.n	80033c2 <xTaskCreateStatic+0xb2>
 8003384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01b      	beq.n	80033c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800339c:	2300      	movs	r3, #0
 800339e:	9303      	str	r3, [sp, #12]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	9302      	str	r3, [sp, #8]
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f850 	bl	800345a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033bc:	f000 f8de 	bl	800357c <prvAddNewTaskToReadyList>
 80033c0:	e001      	b.n	80033c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033c6:	697b      	ldr	r3, [r7, #20]
	}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3728      	adds	r7, #40	@ 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	@ 0x30
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 fc19 	bl	8004c1c <pvPortMalloc>
 80033ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00e      	beq.n	8003410 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033f2:	205c      	movs	r0, #92	@ 0x5c
 80033f4:	f001 fc12 	bl	8004c1c <pvPortMalloc>
 80033f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30
 8003406:	e005      	b.n	8003414 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003408:	6978      	ldr	r0, [r7, #20]
 800340a:	f001 fcd5 	bl	8004db8 <vPortFree>
 800340e:	e001      	b.n	8003414 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d017      	beq.n	800344a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	2300      	movs	r3, #0
 8003426:	9303      	str	r3, [sp, #12]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	9302      	str	r3, [sp, #8]
 800342c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f80e 	bl	800345a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800343e:	69f8      	ldr	r0, [r7, #28]
 8003440:	f000 f89c 	bl	800357c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003444:	2301      	movs	r3, #1
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e002      	b.n	8003450 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
 800344e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003450:	69bb      	ldr	r3, [r7, #24]
	}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b088      	sub	sp, #32
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	461a      	mov	r2, r3
 8003472:	21a5      	movs	r1, #165	@ 0xa5
 8003474:	f001 fdc0 	bl	8004ff8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003482:	3b01      	subs	r3, #1
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f023 0307 	bic.w	r3, r3, #7
 8003490:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	617b      	str	r3, [r7, #20]
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01f      	beq.n	80034fa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	e012      	b.n	80034e6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	4413      	add	r3, r2
 80034c6:	7819      	ldrb	r1, [r3, #0]
 80034c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	3334      	adds	r3, #52	@ 0x34
 80034d0:	460a      	mov	r2, r1
 80034d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	3301      	adds	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b0f      	cmp	r3, #15
 80034ea:	d9e9      	bls.n	80034c0 <prvInitialiseNewTask+0x66>
 80034ec:	e000      	b.n	80034f0 <prvInitialiseNewTask+0x96>
			{
				break;
 80034ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034f8:	e003      	b.n	8003502 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003504:	2b37      	cmp	r3, #55	@ 0x37
 8003506:	d901      	bls.n	800350c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003508:	2337      	movs	r3, #55	@ 0x37
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003510:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003516:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	2200      	movs	r2, #0
 800351c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	3304      	adds	r3, #4
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f966 	bl	80027f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	3318      	adds	r3, #24
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff f961 	bl	80027f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003536:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003546:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	2200      	movs	r2, #0
 800354c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	68f9      	ldr	r1, [r7, #12]
 800355a:	69b8      	ldr	r0, [r7, #24]
 800355c:	f001 f908 	bl	8004770 <pxPortInitialiseStack>
 8003560:	4602      	mov	r2, r0
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800356c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003572:	bf00      	nop
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003584:	f001 fa28 	bl	80049d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003588:	4b2d      	ldr	r3, [pc, #180]	@ (8003640 <prvAddNewTaskToReadyList+0xc4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	4a2c      	ldr	r2, [pc, #176]	@ (8003640 <prvAddNewTaskToReadyList+0xc4>)
 8003590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003592:	4b2c      	ldr	r3, [pc, #176]	@ (8003644 <prvAddNewTaskToReadyList+0xc8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800359a:	4a2a      	ldr	r2, [pc, #168]	@ (8003644 <prvAddNewTaskToReadyList+0xc8>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035a0:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <prvAddNewTaskToReadyList+0xc4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d110      	bne.n	80035ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035a8:	f000 fbe8 	bl	8003d7c <prvInitialiseTaskLists>
 80035ac:	e00d      	b.n	80035ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035ae:	4b26      	ldr	r3, [pc, #152]	@ (8003648 <prvAddNewTaskToReadyList+0xcc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035b6:	4b23      	ldr	r3, [pc, #140]	@ (8003644 <prvAddNewTaskToReadyList+0xc8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d802      	bhi.n	80035ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003644 <prvAddNewTaskToReadyList+0xc8>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ca:	4b20      	ldr	r3, [pc, #128]	@ (800364c <prvAddNewTaskToReadyList+0xd0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	4a1e      	ldr	r2, [pc, #120]	@ (800364c <prvAddNewTaskToReadyList+0xd0>)
 80035d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035d4:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <prvAddNewTaskToReadyList+0xd0>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <prvAddNewTaskToReadyList+0xd4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d903      	bls.n	80035f0 <prvAddNewTaskToReadyList+0x74>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	4a18      	ldr	r2, [pc, #96]	@ (8003650 <prvAddNewTaskToReadyList+0xd4>)
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4a15      	ldr	r2, [pc, #84]	@ (8003654 <prvAddNewTaskToReadyList+0xd8>)
 80035fe:	441a      	add	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7ff f901 	bl	800280e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800360c:	f001 fa16 	bl	8004a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003610:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <prvAddNewTaskToReadyList+0xcc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003618:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <prvAddNewTaskToReadyList+0xc8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	429a      	cmp	r2, r3
 8003624:	d207      	bcs.n	8003636 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003626:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <prvAddNewTaskToReadyList+0xdc>)
 8003628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000c98 	.word	0x20000c98
 8003644:	200007c4 	.word	0x200007c4
 8003648:	20000ca4 	.word	0x20000ca4
 800364c:	20000cb4 	.word	0x20000cb4
 8003650:	20000ca0 	.word	0x20000ca0
 8003654:	200007c8 	.word	0x200007c8
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800366a:	463a      	mov	r2, r7
 800366c:	1d39      	adds	r1, r7, #4
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff f86a 	bl	800274c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	9202      	str	r2, [sp, #8]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2300      	movs	r3, #0
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2300      	movs	r3, #0
 8003688:	460a      	mov	r2, r1
 800368a:	4922      	ldr	r1, [pc, #136]	@ (8003714 <vTaskStartScheduler+0xb8>)
 800368c:	4822      	ldr	r0, [pc, #136]	@ (8003718 <vTaskStartScheduler+0xbc>)
 800368e:	f7ff fe3f 	bl	8003310 <xTaskCreateStatic>
 8003692:	4603      	mov	r3, r0
 8003694:	4a21      	ldr	r2, [pc, #132]	@ (800371c <vTaskStartScheduler+0xc0>)
 8003696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003698:	4b20      	ldr	r3, [pc, #128]	@ (800371c <vTaskStartScheduler+0xc0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036a0:	2301      	movs	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e001      	b.n	80036aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d102      	bne.n	80036b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036b0:	f000 fd04 	bl	80040bc <xTimerCreateTimerTask>
 80036b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d116      	bne.n	80036ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	613b      	str	r3, [r7, #16]
}
 80036ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036d0:	4b13      	ldr	r3, [pc, #76]	@ (8003720 <vTaskStartScheduler+0xc4>)
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295
 80036d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <vTaskStartScheduler+0xc8>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036de:	4b12      	ldr	r3, [pc, #72]	@ (8003728 <vTaskStartScheduler+0xcc>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036e4:	f001 f8d4 	bl	8004890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036e8:	e00f      	b.n	800370a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d10b      	bne.n	800370a <vTaskStartScheduler+0xae>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60fb      	str	r3, [r7, #12]
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	e7fd      	b.n	8003706 <vTaskStartScheduler+0xaa>
}
 800370a:	bf00      	nop
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	080050bc 	.word	0x080050bc
 8003718:	08003d4d 	.word	0x08003d4d
 800371c:	20000cbc 	.word	0x20000cbc
 8003720:	20000cb8 	.word	0x20000cb8
 8003724:	20000ca4 	.word	0x20000ca4
 8003728:	20000c9c 	.word	0x20000c9c

0800372c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003730:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <vTaskSuspendAll+0x18>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	4a03      	ldr	r2, [pc, #12]	@ (8003744 <vTaskSuspendAll+0x18>)
 8003738:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	20000cc0 	.word	0x20000cc0

08003748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003756:	4b42      	ldr	r3, [pc, #264]	@ (8003860 <xTaskResumeAll+0x118>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <xTaskResumeAll+0x2e>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	603b      	str	r3, [r7, #0]
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003776:	f001 f92f 	bl	80049d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800377a:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <xTaskResumeAll+0x118>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3b01      	subs	r3, #1
 8003780:	4a37      	ldr	r2, [pc, #220]	@ (8003860 <xTaskResumeAll+0x118>)
 8003782:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003784:	4b36      	ldr	r3, [pc, #216]	@ (8003860 <xTaskResumeAll+0x118>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d162      	bne.n	8003852 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800378c:	4b35      	ldr	r3, [pc, #212]	@ (8003864 <xTaskResumeAll+0x11c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d05e      	beq.n	8003852 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003794:	e02f      	b.n	80037f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003796:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <xTaskResumeAll+0x120>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3318      	adds	r3, #24
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff f890 	bl	80028c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f88b 	bl	80028c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b6:	4b2d      	ldr	r3, [pc, #180]	@ (800386c <xTaskResumeAll+0x124>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d903      	bls.n	80037c6 <xTaskResumeAll+0x7e>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c2:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <xTaskResumeAll+0x124>)
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4a27      	ldr	r2, [pc, #156]	@ (8003870 <xTaskResumeAll+0x128>)
 80037d4:	441a      	add	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3304      	adds	r3, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f7ff f816 	bl	800280e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e6:	4b23      	ldr	r3, [pc, #140]	@ (8003874 <xTaskResumeAll+0x12c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d302      	bcc.n	80037f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80037f0:	4b21      	ldr	r3, [pc, #132]	@ (8003878 <xTaskResumeAll+0x130>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003868 <xTaskResumeAll+0x120>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1cb      	bne.n	8003796 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003804:	f000 fb58 	bl	8003eb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003808:	4b1c      	ldr	r3, [pc, #112]	@ (800387c <xTaskResumeAll+0x134>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d010      	beq.n	8003836 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003814:	f000 f846 	bl	80038a4 <xTaskIncrementTick>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800381e:	4b16      	ldr	r3, [pc, #88]	@ (8003878 <xTaskResumeAll+0x130>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f1      	bne.n	8003814 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003830:	4b12      	ldr	r3, [pc, #72]	@ (800387c <xTaskResumeAll+0x134>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <xTaskResumeAll+0x130>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800383e:	2301      	movs	r3, #1
 8003840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003842:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <xTaskResumeAll+0x138>)
 8003844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003852:	f001 f8f3 	bl	8004a3c <vPortExitCritical>

	return xAlreadyYielded;
 8003856:	68bb      	ldr	r3, [r7, #8]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000cc0 	.word	0x20000cc0
 8003864:	20000c98 	.word	0x20000c98
 8003868:	20000c58 	.word	0x20000c58
 800386c:	20000ca0 	.word	0x20000ca0
 8003870:	200007c8 	.word	0x200007c8
 8003874:	200007c4 	.word	0x200007c4
 8003878:	20000cac 	.word	0x20000cac
 800387c:	20000ca8 	.word	0x20000ca8
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <xTaskGetTickCount+0x1c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003890:	687b      	ldr	r3, [r7, #4]
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000c9c 	.word	0x20000c9c

080038a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ae:	4b4f      	ldr	r3, [pc, #316]	@ (80039ec <xTaskIncrementTick+0x148>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 8090 	bne.w	80039d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038b8:	4b4d      	ldr	r3, [pc, #308]	@ (80039f0 <xTaskIncrementTick+0x14c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038c0:	4a4b      	ldr	r2, [pc, #300]	@ (80039f0 <xTaskIncrementTick+0x14c>)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d121      	bne.n	8003910 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80038cc:	4b49      	ldr	r3, [pc, #292]	@ (80039f4 <xTaskIncrementTick+0x150>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	603b      	str	r3, [r7, #0]
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	e7fd      	b.n	80038ea <xTaskIncrementTick+0x46>
 80038ee:	4b41      	ldr	r3, [pc, #260]	@ (80039f4 <xTaskIncrementTick+0x150>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	4b40      	ldr	r3, [pc, #256]	@ (80039f8 <xTaskIncrementTick+0x154>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3e      	ldr	r2, [pc, #248]	@ (80039f4 <xTaskIncrementTick+0x150>)
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4a3e      	ldr	r2, [pc, #248]	@ (80039f8 <xTaskIncrementTick+0x154>)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	4b3e      	ldr	r3, [pc, #248]	@ (80039fc <xTaskIncrementTick+0x158>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	4a3c      	ldr	r2, [pc, #240]	@ (80039fc <xTaskIncrementTick+0x158>)
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	f000 fad4 	bl	8003eb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003910:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <xTaskIncrementTick+0x15c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	429a      	cmp	r2, r3
 8003918:	d349      	bcc.n	80039ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391a:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <xTaskIncrementTick+0x150>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003924:	4b36      	ldr	r3, [pc, #216]	@ (8003a00 <xTaskIncrementTick+0x15c>)
 8003926:	f04f 32ff 	mov.w	r2, #4294967295
 800392a:	601a      	str	r2, [r3, #0]
					break;
 800392c:	e03f      	b.n	80039ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800392e:	4b31      	ldr	r3, [pc, #196]	@ (80039f4 <xTaskIncrementTick+0x150>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d203      	bcs.n	800394e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003946:	4a2e      	ldr	r2, [pc, #184]	@ (8003a00 <xTaskIncrementTick+0x15c>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800394c:	e02f      	b.n	80039ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3304      	adds	r3, #4
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe ffb8 	bl	80028c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3318      	adds	r3, #24
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe ffaf 	bl	80028c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396e:	4b25      	ldr	r3, [pc, #148]	@ (8003a04 <xTaskIncrementTick+0x160>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d903      	bls.n	800397e <xTaskIncrementTick+0xda>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397a:	4a22      	ldr	r2, [pc, #136]	@ (8003a04 <xTaskIncrementTick+0x160>)
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a08 <xTaskIncrementTick+0x164>)
 800398c:	441a      	add	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe ff3a 	bl	800280e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <xTaskIncrementTick+0x168>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3b8      	bcc.n	800391a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80039a8:	2301      	movs	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ac:	e7b5      	b.n	800391a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039ae:	4b17      	ldr	r3, [pc, #92]	@ (8003a0c <xTaskIncrementTick+0x168>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b4:	4914      	ldr	r1, [pc, #80]	@ (8003a08 <xTaskIncrementTick+0x164>)
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d901      	bls.n	80039ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039ca:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <xTaskIncrementTick+0x16c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80039d2:	2301      	movs	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	e004      	b.n	80039e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a14 <xTaskIncrementTick+0x170>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	4a0d      	ldr	r2, [pc, #52]	@ (8003a14 <xTaskIncrementTick+0x170>)
 80039e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039e2:	697b      	ldr	r3, [r7, #20]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000cc0 	.word	0x20000cc0
 80039f0:	20000c9c 	.word	0x20000c9c
 80039f4:	20000c50 	.word	0x20000c50
 80039f8:	20000c54 	.word	0x20000c54
 80039fc:	20000cb0 	.word	0x20000cb0
 8003a00:	20000cb8 	.word	0x20000cb8
 8003a04:	20000ca0 	.word	0x20000ca0
 8003a08:	200007c8 	.word	0x200007c8
 8003a0c:	200007c4 	.word	0x200007c4
 8003a10:	20000cac 	.word	0x20000cac
 8003a14:	20000ca8 	.word	0x20000ca8

08003a18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ac0 <vTaskSwitchContext+0xa8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a26:	4b27      	ldr	r3, [pc, #156]	@ (8003ac4 <vTaskSwitchContext+0xac>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a2c:	e042      	b.n	8003ab4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003a2e:	4b25      	ldr	r3, [pc, #148]	@ (8003ac4 <vTaskSwitchContext+0xac>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a34:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <vTaskSwitchContext+0xb0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e011      	b.n	8003a60 <vTaskSwitchContext+0x48>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <vTaskSwitchContext+0x42>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	607b      	str	r3, [r7, #4]
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	e7fd      	b.n	8003a56 <vTaskSwitchContext+0x3e>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	491a      	ldr	r1, [pc, #104]	@ (8003acc <vTaskSwitchContext+0xb4>)
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0e3      	beq.n	8003a3c <vTaskSwitchContext+0x24>
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4a13      	ldr	r2, [pc, #76]	@ (8003acc <vTaskSwitchContext+0xb4>)
 8003a80:	4413      	add	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3308      	adds	r3, #8
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d104      	bne.n	8003aa4 <vTaskSwitchContext+0x8c>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <vTaskSwitchContext+0xb8>)
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4a06      	ldr	r2, [pc, #24]	@ (8003ac8 <vTaskSwitchContext+0xb0>)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	20000cc0 	.word	0x20000cc0
 8003ac4:	20000cac 	.word	0x20000cac
 8003ac8:	20000ca0 	.word	0x20000ca0
 8003acc:	200007c8 	.word	0x200007c8
 8003ad0:	200007c4 	.word	0x200007c4

08003ad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	60fb      	str	r3, [r7, #12]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003afc:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <vTaskPlaceOnEventList+0x48>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3318      	adds	r3, #24
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fe fea6 	bl	8002856 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	6838      	ldr	r0, [r7, #0]
 8003b0e:	f000 fa81 	bl	8004014 <prvAddCurrentTaskToDelayedList>
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200007c4 	.word	0x200007c4

08003b20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	617b      	str	r3, [r7, #20]
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	e7fd      	b.n	8003b46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	4619      	mov	r1, r3
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7fe fe5b 	bl	800280e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	68b8      	ldr	r0, [r7, #8]
 8003b68:	f000 fa54 	bl	8004014 <prvAddCurrentTaskToDelayedList>
	}
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200007c4 	.word	0x200007c4

08003b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10b      	bne.n	8003ba6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60fb      	str	r3, [r7, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	e7fd      	b.n	8003ba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fe8c 	bl	80028c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <xTaskRemoveFromEventList+0xb0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11d      	bne.n	8003bf4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fe83 	bl	80028c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc6:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <xTaskRemoveFromEventList+0xb4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d903      	bls.n	8003bd6 <xTaskRemoveFromEventList+0x5e>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <xTaskRemoveFromEventList+0xb4>)
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4a13      	ldr	r2, [pc, #76]	@ (8003c30 <xTaskRemoveFromEventList+0xb8>)
 8003be4:	441a      	add	r2, r3
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7fe fe0e 	bl	800280e <vListInsertEnd>
 8003bf2:	e005      	b.n	8003c00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	3318      	adds	r3, #24
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	480e      	ldr	r0, [pc, #56]	@ (8003c34 <xTaskRemoveFromEventList+0xbc>)
 8003bfc:	f7fe fe07 	bl	800280e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c04:	4b0c      	ldr	r3, [pc, #48]	@ (8003c38 <xTaskRemoveFromEventList+0xc0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d905      	bls.n	8003c1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <xTaskRemoveFromEventList+0xc4>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e001      	b.n	8003c1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c1e:	697b      	ldr	r3, [r7, #20]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000cc0 	.word	0x20000cc0
 8003c2c:	20000ca0 	.word	0x20000ca0
 8003c30:	200007c8 	.word	0x200007c8
 8003c34:	20000c58 	.word	0x20000c58
 8003c38:	200007c4 	.word	0x200007c4
 8003c3c:	20000cac 	.word	0x20000cac

08003c40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <vTaskInternalSetTimeOutState+0x24>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <vTaskInternalSetTimeOutState+0x28>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	20000cb0 	.word	0x20000cb0
 8003c68:	20000c9c 	.word	0x20000c9c

08003c6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	613b      	str	r3, [r7, #16]
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60fb      	str	r3, [r7, #12]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003cb2:	f000 fe91 	bl	80049d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d2c <xTaskCheckForTimeOut+0xc0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d102      	bne.n	8003cd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	e023      	b.n	8003d1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <xTaskCheckForTimeOut+0xc4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d007      	beq.n	8003cf2 <xTaskCheckForTimeOut+0x86>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e015      	b.n	8003d1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d20b      	bcs.n	8003d14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff99 	bl	8003c40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e004      	b.n	8003d1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d1e:	f000 fe8d 	bl	8004a3c <vPortExitCritical>

	return xReturn;
 8003d22:	69fb      	ldr	r3, [r7, #28]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000c9c 	.word	0x20000c9c
 8003d30:	20000cb0 	.word	0x20000cb0

08003d34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <vTaskMissedYield+0x14>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	20000cac 	.word	0x20000cac

08003d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d54:	f000 f852 	bl	8003dfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d58:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <prvIdleTask+0x28>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d9f9      	bls.n	8003d54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <prvIdleTask+0x2c>)
 8003d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d70:	e7f0      	b.n	8003d54 <prvIdleTask+0x8>
 8003d72:	bf00      	nop
 8003d74:	200007c8 	.word	0x200007c8
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	e00c      	b.n	8003da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a12      	ldr	r2, [pc, #72]	@ (8003ddc <prvInitialiseTaskLists+0x60>)
 8003d94:	4413      	add	r3, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fd0c 	bl	80027b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b37      	cmp	r3, #55	@ 0x37
 8003da6:	d9ef      	bls.n	8003d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003da8:	480d      	ldr	r0, [pc, #52]	@ (8003de0 <prvInitialiseTaskLists+0x64>)
 8003daa:	f7fe fd03 	bl	80027b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dae:	480d      	ldr	r0, [pc, #52]	@ (8003de4 <prvInitialiseTaskLists+0x68>)
 8003db0:	f7fe fd00 	bl	80027b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003db4:	480c      	ldr	r0, [pc, #48]	@ (8003de8 <prvInitialiseTaskLists+0x6c>)
 8003db6:	f7fe fcfd 	bl	80027b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dba:	480c      	ldr	r0, [pc, #48]	@ (8003dec <prvInitialiseTaskLists+0x70>)
 8003dbc:	f7fe fcfa 	bl	80027b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003dc0:	480b      	ldr	r0, [pc, #44]	@ (8003df0 <prvInitialiseTaskLists+0x74>)
 8003dc2:	f7fe fcf7 	bl	80027b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <prvInitialiseTaskLists+0x78>)
 8003dc8:	4a05      	ldr	r2, [pc, #20]	@ (8003de0 <prvInitialiseTaskLists+0x64>)
 8003dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003df8 <prvInitialiseTaskLists+0x7c>)
 8003dce:	4a05      	ldr	r2, [pc, #20]	@ (8003de4 <prvInitialiseTaskLists+0x68>)
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200007c8 	.word	0x200007c8
 8003de0:	20000c28 	.word	0x20000c28
 8003de4:	20000c3c 	.word	0x20000c3c
 8003de8:	20000c58 	.word	0x20000c58
 8003dec:	20000c6c 	.word	0x20000c6c
 8003df0:	20000c84 	.word	0x20000c84
 8003df4:	20000c50 	.word	0x20000c50
 8003df8:	20000c54 	.word	0x20000c54

08003dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e02:	e019      	b.n	8003e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e04:	f000 fde8 	bl	80049d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e08:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <prvCheckTasksWaitingTermination+0x50>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fd57 	bl	80028c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <prvCheckTasksWaitingTermination+0x54>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	4a0b      	ldr	r2, [pc, #44]	@ (8003e50 <prvCheckTasksWaitingTermination+0x54>)
 8003e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e2e:	f000 fe05 	bl	8004a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f810 	bl	8003e58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e1      	bne.n	8003e04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000c6c 	.word	0x20000c6c
 8003e50:	20000c98 	.word	0x20000c98
 8003e54:	20000c80 	.word	0x20000c80

08003e58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 ffa2 	bl	8004db8 <vPortFree>
				vPortFree( pxTCB );
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 ff9f 	bl	8004db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e7a:	e019      	b.n	8003eb0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d103      	bne.n	8003e8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 ff96 	bl	8004db8 <vPortFree>
	}
 8003e8c:	e010      	b.n	8003eb0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d00b      	beq.n	8003eb0 <prvDeleteTCB+0x58>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	60fb      	str	r3, [r7, #12]
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <prvDeleteTCB+0x54>
	}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <prvResetNextTaskUnblockTime+0x38>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ed0:	e008      	b.n	8003ee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed2:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <prvResetNextTaskUnblockTime+0x38>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8003ee2:	6013      	str	r3, [r2, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20000c50 	.word	0x20000c50
 8003ef4:	20000cb8 	.word	0x20000cb8

08003ef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003efe:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <xTaskGetSchedulerState+0x34>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f06:	2301      	movs	r3, #1
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e008      	b.n	8003f1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0c:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <xTaskGetSchedulerState+0x38>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f14:	2302      	movs	r3, #2
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	e001      	b.n	8003f1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f1e:	687b      	ldr	r3, [r7, #4]
	}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	20000ca4 	.word	0x20000ca4
 8003f30:	20000cc0 	.word	0x20000cc0

08003f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d058      	beq.n	8003ffc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004008 <xTaskPriorityDisinherit+0xd4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d00b      	beq.n	8003f6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60fb      	str	r3, [r7, #12]
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	e7fd      	b.n	8003f68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	60bb      	str	r3, [r7, #8]
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	1e5a      	subs	r2, r3, #1
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d02c      	beq.n	8003ffc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d128      	bne.n	8003ffc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fc8a 	bl	80028c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800400c <xTaskPriorityDisinherit+0xd8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d903      	bls.n	8003fdc <xTaskPriorityDisinherit+0xa8>
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800400c <xTaskPriorityDisinherit+0xd8>)
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4a09      	ldr	r2, [pc, #36]	@ (8004010 <xTaskPriorityDisinherit+0xdc>)
 8003fea:	441a      	add	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f7fe fc0b 	bl	800280e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ffc:	697b      	ldr	r3, [r7, #20]
	}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200007c4 	.word	0x200007c4
 800400c:	20000ca0 	.word	0x20000ca0
 8004010:	200007c8 	.word	0x200007c8

08004014 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800401e:	4b21      	ldr	r3, [pc, #132]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004024:	4b20      	ldr	r3, [pc, #128]	@ (80040a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3304      	adds	r3, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fc4c 	bl	80028c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d10a      	bne.n	800404e <prvAddCurrentTaskToDelayedList+0x3a>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800403e:	4b1a      	ldr	r3, [pc, #104]	@ (80040a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4819      	ldr	r0, [pc, #100]	@ (80040ac <prvAddCurrentTaskToDelayedList+0x98>)
 8004048:	f7fe fbe1 	bl	800280e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800404c:	e026      	b.n	800409c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004056:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	429a      	cmp	r2, r3
 8004064:	d209      	bcs.n	800407a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004066:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f7fe fbef 	bl	8002856 <vListInsert>
}
 8004078:	e010      	b.n	800409c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800407a:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fe fbe5 	bl	8002856 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800408c:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d202      	bcs.n	800409c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004096:	4a08      	ldr	r2, [pc, #32]	@ (80040b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000c9c 	.word	0x20000c9c
 80040a8:	200007c4 	.word	0x200007c4
 80040ac:	20000c84 	.word	0x20000c84
 80040b0:	20000c54 	.word	0x20000c54
 80040b4:	20000c50 	.word	0x20000c50
 80040b8:	20000cb8 	.word	0x20000cb8

080040bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	@ 0x28
 80040c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040c6:	f000 fb13 	bl	80046f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004140 <xTimerCreateTimerTask+0x84>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d021      	beq.n	8004116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040da:	1d3a      	adds	r2, r7, #4
 80040dc:	f107 0108 	add.w	r1, r7, #8
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe fb4b 	bl	8002780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	9202      	str	r2, [sp, #8]
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	2302      	movs	r3, #2
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	460a      	mov	r2, r1
 80040fc:	4911      	ldr	r1, [pc, #68]	@ (8004144 <xTimerCreateTimerTask+0x88>)
 80040fe:	4812      	ldr	r0, [pc, #72]	@ (8004148 <xTimerCreateTimerTask+0x8c>)
 8004100:	f7ff f906 	bl	8003310 <xTaskCreateStatic>
 8004104:	4603      	mov	r3, r0
 8004106:	4a11      	ldr	r2, [pc, #68]	@ (800414c <xTimerCreateTimerTask+0x90>)
 8004108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <xTimerCreateTimerTask+0x90>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004112:	2301      	movs	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	613b      	str	r3, [r7, #16]
}
 800412e:	bf00      	nop
 8004130:	bf00      	nop
 8004132:	e7fd      	b.n	8004130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004134:	697b      	ldr	r3, [r7, #20]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000cf4 	.word	0x20000cf4
 8004144:	080050c4 	.word	0x080050c4
 8004148:	08004289 	.word	0x08004289
 800414c:	20000cf8 	.word	0x20000cf8

08004150 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	@ 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <xTimerGenericCommand+0x30>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	623b      	str	r3, [r7, #32]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004180:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <xTimerGenericCommand+0x98>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02a      	beq.n	80041de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b05      	cmp	r3, #5
 8004198:	dc18      	bgt.n	80041cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800419a:	f7ff fead 	bl	8003ef8 <xTaskGetSchedulerState>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d109      	bne.n	80041b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041a4:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <xTimerGenericCommand+0x98>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	f107 0110 	add.w	r1, r7, #16
 80041ac:	2300      	movs	r3, #0
 80041ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b0:	f7fe fcbe 	bl	8002b30 <xQueueGenericSend>
 80041b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80041b6:	e012      	b.n	80041de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <xTimerGenericCommand+0x98>)
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	f107 0110 	add.w	r1, r7, #16
 80041c0:	2300      	movs	r3, #0
 80041c2:	2200      	movs	r2, #0
 80041c4:	f7fe fcb4 	bl	8002b30 <xQueueGenericSend>
 80041c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80041ca:	e008      	b.n	80041de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041cc:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <xTimerGenericCommand+0x98>)
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	f107 0110 	add.w	r1, r7, #16
 80041d4:	2300      	movs	r3, #0
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	f7fe fdac 	bl	8002d34 <xQueueGenericSendFromISR>
 80041dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3728      	adds	r7, #40	@ 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000cf4 	.word	0x20000cf4

080041ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f6:	4b23      	ldr	r3, [pc, #140]	@ (8004284 <prvProcessExpiredTimer+0x98>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3304      	adds	r3, #4
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fb5f 	bl	80028c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d023      	beq.n	8004260 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	18d1      	adds	r1, r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	6978      	ldr	r0, [r7, #20]
 8004226:	f000 f8d5 	bl	80043d4 <prvInsertTimerInActiveList>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	2100      	movs	r1, #0
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f7ff ff88 	bl	8004150 <xTimerGenericCommand>
 8004240:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d114      	bne.n	8004272 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	60fb      	str	r3, [r7, #12]
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	b2da      	uxtb	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	4798      	blx	r3
}
 800427a:	bf00      	nop
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000cec 	.word	0x20000cec

08004288 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f859 	bl	800434c <prvGetNextExpireTime>
 800429a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4619      	mov	r1, r3
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f805 	bl	80042b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042a6:	f000 f8d7 	bl	8004458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042aa:	bf00      	nop
 80042ac:	e7f0      	b.n	8004290 <prvTimerTask+0x8>
	...

080042b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042ba:	f7ff fa37 	bl	800372c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042be:	f107 0308 	add.w	r3, r7, #8
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f866 	bl	8004394 <prvSampleTimeNow>
 80042c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d130      	bne.n	8004332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10a      	bne.n	80042ec <prvProcessTimerOrBlockTask+0x3c>
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d806      	bhi.n	80042ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042de:	f7ff fa33 	bl	8003748 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff81 	bl	80041ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042ea:	e024      	b.n	8004336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042f2:	4b13      	ldr	r3, [pc, #76]	@ (8004340 <prvProcessTimerOrBlockTask+0x90>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <prvProcessTimerOrBlockTask+0x50>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <prvProcessTimerOrBlockTask+0x52>
 8004300:	2300      	movs	r3, #0
 8004302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004304:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <prvProcessTimerOrBlockTask+0x94>)
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	4619      	mov	r1, r3
 8004312:	f7fe ffc9 	bl	80032a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004316:	f7ff fa17 	bl	8003748 <xTaskResumeAll>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004320:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <prvProcessTimerOrBlockTask+0x98>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
}
 8004330:	e001      	b.n	8004336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004332:	f7ff fa09 	bl	8003748 <xTaskResumeAll>
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000cf0 	.word	0x20000cf0
 8004344:	20000cf4 	.word	0x20000cf4
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004354:	4b0e      	ldr	r3, [pc, #56]	@ (8004390 <prvGetNextExpireTime+0x44>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <prvGetNextExpireTime+0x16>
 800435e:	2201      	movs	r2, #1
 8004360:	e000      	b.n	8004364 <prvGetNextExpireTime+0x18>
 8004362:	2200      	movs	r2, #0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004370:	4b07      	ldr	r3, [pc, #28]	@ (8004390 <prvGetNextExpireTime+0x44>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	e001      	b.n	8004380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000cec 	.word	0x20000cec

08004394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800439c:	f7ff fa72 	bl	8003884 <xTaskGetTickCount>
 80043a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043a2:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <prvSampleTimeNow+0x3c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d205      	bcs.n	80043b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043ac:	f000 f93a 	bl	8004624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e002      	b.n	80043be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043be:	4a04      	ldr	r2, [pc, #16]	@ (80043d0 <prvSampleTimeNow+0x3c>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043c4:	68fb      	ldr	r3, [r7, #12]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000cfc 	.word	0x20000cfc

080043d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d812      	bhi.n	8004420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	1ad2      	subs	r2, r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e01b      	b.n	8004446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <prvInsertTimerInActiveList+0x7c>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3304      	adds	r3, #4
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f7fe fa1c 	bl	8002856 <vListInsert>
 800441e:	e012      	b.n	8004446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d206      	bcs.n	8004436 <prvInsertTimerInActiveList+0x62>
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004430:	2301      	movs	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e007      	b.n	8004446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004436:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <prvInsertTimerInActiveList+0x80>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3304      	adds	r3, #4
 800443e:	4619      	mov	r1, r3
 8004440:	4610      	mov	r0, r2
 8004442:	f7fe fa08 	bl	8002856 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004446:	697b      	ldr	r3, [r7, #20]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000cf0 	.word	0x20000cf0
 8004454:	20000cec 	.word	0x20000cec

08004458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08e      	sub	sp, #56	@ 0x38
 800445c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800445e:	e0ce      	b.n	80045fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	da19      	bge.n	800449a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	3304      	adds	r3, #4
 800446a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	61fb      	str	r3, [r7, #28]
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	e7fd      	b.n	8004486 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004490:	6850      	ldr	r0, [r2, #4]
 8004492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004494:	6892      	ldr	r2, [r2, #8]
 8004496:	4611      	mov	r1, r2
 8004498:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f2c0 80ae 	blt.w	80045fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	3304      	adds	r3, #4
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fa08 	bl	80028c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044b8:	463b      	mov	r3, r7
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff6a 	bl	8004394 <prvSampleTimeNow>
 80044c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	f200 8097 	bhi.w	80045f8 <prvProcessReceivedCommands+0x1a0>
 80044ca:	a201      	add	r2, pc, #4	@ (adr r2, 80044d0 <prvProcessReceivedCommands+0x78>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	080044f9 	.word	0x080044f9
 80044dc:	0800456f 	.word	0x0800456f
 80044e0:	08004583 	.word	0x08004583
 80044e4:	080045cf 	.word	0x080045cf
 80044e8:	080044f9 	.word	0x080044f9
 80044ec:	080044f9 	.word	0x080044f9
 80044f0:	0800456f 	.word	0x0800456f
 80044f4:	08004583 	.word	0x08004583
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	18d1      	adds	r1, r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004518:	f7ff ff5c 	bl	80043d4 <prvInsertTimerInActiveList>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d06c      	beq.n	80045fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d061      	beq.n	80045fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	441a      	add	r2, r3
 8004540:	2300      	movs	r3, #0
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2300      	movs	r3, #0
 8004546:	2100      	movs	r1, #0
 8004548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800454a:	f7ff fe01 	bl	8004150 <xTimerGenericCommand>
 800454e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d152      	bne.n	80045fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	61bb      	str	r3, [r7, #24]
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	e7fd      	b.n	800456a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	b2da      	uxtb	r2, r3
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004580:	e03d      	b.n	80045fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	b2da      	uxtb	r2, r3
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004598:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	617b      	str	r3, [r7, #20]
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop
 80045b8:	e7fd      	b.n	80045b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	18d1      	adds	r1, r2, r3
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045c8:	f7ff ff04 	bl	80043d4 <prvInsertTimerInActiveList>
					break;
 80045cc:	e017      	b.n	80045fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80045dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045de:	f000 fbeb 	bl	8004db8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045e2:	e00c      	b.n	80045fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80045f6:	e002      	b.n	80045fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80045f8:	bf00      	nop
 80045fa:	e000      	b.n	80045fe <prvProcessReceivedCommands+0x1a6>
					break;
 80045fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <prvProcessReceivedCommands+0x1c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	1d39      	adds	r1, r7, #4
 8004604:	2200      	movs	r2, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fc32 	bl	8002e70 <xQueueReceive>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	f47f af26 	bne.w	8004460 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	3730      	adds	r7, #48	@ 0x30
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000cf4 	.word	0x20000cf4

08004624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800462a:	e049      	b.n	80046c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800462c:	4b2e      	ldr	r3, [pc, #184]	@ (80046e8 <prvSwitchTimerLists+0xc4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004636:	4b2c      	ldr	r3, [pc, #176]	@ (80046e8 <prvSwitchTimerLists+0xc4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3304      	adds	r3, #4
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe f93f 	bl	80028c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02f      	beq.n	80046c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4413      	add	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	429a      	cmp	r2, r3
 8004670:	d90e      	bls.n	8004690 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800467e:	4b1a      	ldr	r3, [pc, #104]	@ (80046e8 <prvSwitchTimerLists+0xc4>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3304      	adds	r3, #4
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fe f8e4 	bl	8002856 <vListInsert>
 800468e:	e017      	b.n	80046c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004690:	2300      	movs	r3, #0
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	2300      	movs	r3, #0
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	2100      	movs	r1, #0
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff fd58 	bl	8004150 <xTimerGenericCommand>
 80046a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	603b      	str	r3, [r7, #0]
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046c0:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <prvSwitchTimerLists+0xc4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1b0      	bne.n	800462c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046ca:	4b07      	ldr	r3, [pc, #28]	@ (80046e8 <prvSwitchTimerLists+0xc4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046d0:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <prvSwitchTimerLists+0xc8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <prvSwitchTimerLists+0xc4>)
 80046d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046d8:	4a04      	ldr	r2, [pc, #16]	@ (80046ec <prvSwitchTimerLists+0xc8>)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6013      	str	r3, [r2, #0]
}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000cec 	.word	0x20000cec
 80046ec:	20000cf0 	.word	0x20000cf0

080046f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80046f6:	f000 f96f 	bl	80049d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046fa:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <prvCheckForValidListAndQueue+0x60>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d120      	bne.n	8004744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004702:	4814      	ldr	r0, [pc, #80]	@ (8004754 <prvCheckForValidListAndQueue+0x64>)
 8004704:	f7fe f856 	bl	80027b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004708:	4813      	ldr	r0, [pc, #76]	@ (8004758 <prvCheckForValidListAndQueue+0x68>)
 800470a:	f7fe f853 	bl	80027b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800470e:	4b13      	ldr	r3, [pc, #76]	@ (800475c <prvCheckForValidListAndQueue+0x6c>)
 8004710:	4a10      	ldr	r2, [pc, #64]	@ (8004754 <prvCheckForValidListAndQueue+0x64>)
 8004712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004714:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <prvCheckForValidListAndQueue+0x70>)
 8004716:	4a10      	ldr	r2, [pc, #64]	@ (8004758 <prvCheckForValidListAndQueue+0x68>)
 8004718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800471a:	2300      	movs	r3, #0
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4b11      	ldr	r3, [pc, #68]	@ (8004764 <prvCheckForValidListAndQueue+0x74>)
 8004720:	4a11      	ldr	r2, [pc, #68]	@ (8004768 <prvCheckForValidListAndQueue+0x78>)
 8004722:	2110      	movs	r1, #16
 8004724:	200a      	movs	r0, #10
 8004726:	f7fe f963 	bl	80029f0 <xQueueGenericCreateStatic>
 800472a:	4603      	mov	r3, r0
 800472c:	4a08      	ldr	r2, [pc, #32]	@ (8004750 <prvCheckForValidListAndQueue+0x60>)
 800472e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004730:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <prvCheckForValidListAndQueue+0x60>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004738:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <prvCheckForValidListAndQueue+0x60>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	490b      	ldr	r1, [pc, #44]	@ (800476c <prvCheckForValidListAndQueue+0x7c>)
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fd88 	bl	8003254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004744:	f000 f97a 	bl	8004a3c <vPortExitCritical>
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000cf4 	.word	0x20000cf4
 8004754:	20000cc4 	.word	0x20000cc4
 8004758:	20000cd8 	.word	0x20000cd8
 800475c:	20000cec 	.word	0x20000cec
 8004760:	20000cf0 	.word	0x20000cf0
 8004764:	20000da0 	.word	0x20000da0
 8004768:	20000d00 	.word	0x20000d00
 800476c:	080050cc 	.word	0x080050cc

08004770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b04      	subs	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b04      	subs	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f023 0201 	bic.w	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3b04      	subs	r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047a0:	4a0c      	ldr	r2, [pc, #48]	@ (80047d4 <pxPortInitialiseStack+0x64>)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b14      	subs	r3, #20
 80047aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3b04      	subs	r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f06f 0202 	mvn.w	r2, #2
 80047be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b20      	subs	r3, #32
 80047c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047c6:	68fb      	ldr	r3, [r7, #12]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	080047d9 	.word	0x080047d9

080047d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047e2:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <prvTaskExitError+0x58>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d00b      	beq.n	8004804 <prvTaskExitError+0x2c>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60fb      	str	r3, [r7, #12]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <prvTaskExitError+0x28>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60bb      	str	r3, [r7, #8]
}
 8004816:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004818:	bf00      	nop
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0fc      	beq.n	800481a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	2000000c 	.word	0x2000000c
	...

08004840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004840:	4b07      	ldr	r3, [pc, #28]	@ (8004860 <pxCurrentTCBConst2>)
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	6808      	ldr	r0, [r1, #0]
 8004846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484a:	f380 8809 	msr	PSP, r0
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8811 	msr	BASEPRI, r0
 800485a:	4770      	bx	lr
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst2>:
 8004860:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004868:	4808      	ldr	r0, [pc, #32]	@ (800488c <prvPortStartFirstTask+0x24>)
 800486a:	6800      	ldr	r0, [r0, #0]
 800486c:	6800      	ldr	r0, [r0, #0]
 800486e:	f380 8808 	msr	MSP, r0
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f380 8814 	msr	CONTROL, r0
 800487a:	b662      	cpsie	i
 800487c:	b661      	cpsie	f
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	df00      	svc	0
 8004888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800488a:	bf00      	nop
 800488c:	e000ed08 	.word	0xe000ed08

08004890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004896:	4b47      	ldr	r3, [pc, #284]	@ (80049b4 <xPortStartScheduler+0x124>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a47      	ldr	r2, [pc, #284]	@ (80049b8 <xPortStartScheduler+0x128>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10b      	bne.n	80048b8 <xPortStartScheduler+0x28>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	613b      	str	r3, [r7, #16]
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048b8:	4b3e      	ldr	r3, [pc, #248]	@ (80049b4 <xPortStartScheduler+0x124>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3f      	ldr	r2, [pc, #252]	@ (80049bc <xPortStartScheduler+0x12c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d10b      	bne.n	80048da <xPortStartScheduler+0x4a>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	60fb      	str	r3, [r7, #12]
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	e7fd      	b.n	80048d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048da:	4b39      	ldr	r3, [pc, #228]	@ (80049c0 <xPortStartScheduler+0x130>)
 80048dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	22ff      	movs	r2, #255	@ 0xff
 80048ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	4b31      	ldr	r3, [pc, #196]	@ (80049c4 <xPortStartScheduler+0x134>)
 8004900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004902:	4b31      	ldr	r3, [pc, #196]	@ (80049c8 <xPortStartScheduler+0x138>)
 8004904:	2207      	movs	r2, #7
 8004906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004908:	e009      	b.n	800491e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800490a:	4b2f      	ldr	r3, [pc, #188]	@ (80049c8 <xPortStartScheduler+0x138>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3b01      	subs	r3, #1
 8004910:	4a2d      	ldr	r2, [pc, #180]	@ (80049c8 <xPortStartScheduler+0x138>)
 8004912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004926:	2b80      	cmp	r3, #128	@ 0x80
 8004928:	d0ef      	beq.n	800490a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800492a:	4b27      	ldr	r3, [pc, #156]	@ (80049c8 <xPortStartScheduler+0x138>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f1c3 0307 	rsb	r3, r3, #7
 8004932:	2b04      	cmp	r3, #4
 8004934:	d00b      	beq.n	800494e <xPortStartScheduler+0xbe>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60bb      	str	r3, [r7, #8]
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	e7fd      	b.n	800494a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800494e:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <xPortStartScheduler+0x138>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	4a1c      	ldr	r2, [pc, #112]	@ (80049c8 <xPortStartScheduler+0x138>)
 8004956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004958:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <xPortStartScheduler+0x138>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004960:	4a19      	ldr	r2, [pc, #100]	@ (80049c8 <xPortStartScheduler+0x138>)
 8004962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800496c:	4b17      	ldr	r3, [pc, #92]	@ (80049cc <xPortStartScheduler+0x13c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <xPortStartScheduler+0x13c>)
 8004972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004978:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <xPortStartScheduler+0x13c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a13      	ldr	r2, [pc, #76]	@ (80049cc <xPortStartScheduler+0x13c>)
 800497e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004984:	f000 f8da 	bl	8004b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004988:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <xPortStartScheduler+0x140>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800498e:	f000 f8f9 	bl	8004b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004992:	4b10      	ldr	r3, [pc, #64]	@ (80049d4 <xPortStartScheduler+0x144>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a0f      	ldr	r2, [pc, #60]	@ (80049d4 <xPortStartScheduler+0x144>)
 8004998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800499c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800499e:	f7ff ff63 	bl	8004868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049a2:	f7ff f839 	bl	8003a18 <vTaskSwitchContext>
	prvTaskExitError();
 80049a6:	f7ff ff17 	bl	80047d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	e000ed00 	.word	0xe000ed00
 80049b8:	410fc271 	.word	0x410fc271
 80049bc:	410fc270 	.word	0x410fc270
 80049c0:	e000e400 	.word	0xe000e400
 80049c4:	20000df0 	.word	0x20000df0
 80049c8:	20000df4 	.word	0x20000df4
 80049cc:	e000ed20 	.word	0xe000ed20
 80049d0:	2000000c 	.word	0x2000000c
 80049d4:	e000ef34 	.word	0xe000ef34

080049d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	607b      	str	r3, [r7, #4]
}
 80049f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049f2:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <vPortEnterCritical+0x5c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3301      	adds	r3, #1
 80049f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004a34 <vPortEnterCritical+0x5c>)
 80049fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a34 <vPortEnterCritical+0x5c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d110      	bne.n	8004a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a04:	4b0c      	ldr	r3, [pc, #48]	@ (8004a38 <vPortEnterCritical+0x60>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	603b      	str	r3, [r7, #0]
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	e7fd      	b.n	8004a22 <vPortEnterCritical+0x4a>
	}
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	2000000c 	.word	0x2000000c
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a42:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <vPortExitCritical+0x50>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <vPortExitCritical+0x26>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	607b      	str	r3, [r7, #4]
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	e7fd      	b.n	8004a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a62:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <vPortExitCritical+0x50>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	4a08      	ldr	r2, [pc, #32]	@ (8004a8c <vPortExitCritical+0x50>)
 8004a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a6c:	4b07      	ldr	r3, [pc, #28]	@ (8004a8c <vPortExitCritical+0x50>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <vPortExitCritical+0x44>
 8004a74:	2300      	movs	r3, #0
 8004a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	f383 8811 	msr	BASEPRI, r3
}
 8004a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	2000000c 	.word	0x2000000c

08004a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a90:	f3ef 8009 	mrs	r0, PSP
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <pxCurrentTCBConst>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f01e 0f10 	tst.w	lr, #16
 8004aa0:	bf08      	it	eq
 8004aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aaa:	6010      	str	r0, [r2, #0]
 8004aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ab4:	f380 8811 	msr	BASEPRI, r0
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f7fe ffaa 	bl	8003a18 <vTaskSwitchContext>
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f380 8811 	msr	BASEPRI, r0
 8004acc:	bc09      	pop	{r0, r3}
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	6808      	ldr	r0, [r1, #0]
 8004ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad6:	f01e 0f10 	tst.w	lr, #16
 8004ada:	bf08      	it	eq
 8004adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ae0:	f380 8809 	msr	PSP, r0
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	f3af 8000 	nop.w

08004af0 <pxCurrentTCBConst>:
 8004af0:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	607b      	str	r3, [r7, #4]
}
 8004b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b12:	f7fe fec7 	bl	80038a4 <xTaskIncrementTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <xPortSysTickHandler+0x40>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	2300      	movs	r3, #0
 8004b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f383 8811 	msr	BASEPRI, r3
}
 8004b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <vPortSetupTimerInterrupt+0x34>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b46:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <vPortSetupTimerInterrupt+0x38>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <vPortSetupTimerInterrupt+0x3c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0a      	ldr	r2, [pc, #40]	@ (8004b7c <vPortSetupTimerInterrupt+0x40>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	4a09      	ldr	r2, [pc, #36]	@ (8004b80 <vPortSetupTimerInterrupt+0x44>)
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b5e:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <vPortSetupTimerInterrupt+0x34>)
 8004b60:	2207      	movs	r2, #7
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000e010 	.word	0xe000e010
 8004b74:	e000e018 	.word	0xe000e018
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	10624dd3 	.word	0x10624dd3
 8004b80:	e000e014 	.word	0xe000e014

08004b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004b94 <vPortEnableVFP+0x10>
 8004b88:	6801      	ldr	r1, [r0, #0]
 8004b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b8e:	6001      	str	r1, [r0, #0]
 8004b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b92:	bf00      	nop
 8004b94:	e000ed88 	.word	0xe000ed88

08004b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b9e:	f3ef 8305 	mrs	r3, IPSR
 8004ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d915      	bls.n	8004bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004baa:	4a18      	ldr	r2, [pc, #96]	@ (8004c0c <vPortValidateInterruptPriority+0x74>)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bb4:	4b16      	ldr	r3, [pc, #88]	@ (8004c10 <vPortValidateInterruptPriority+0x78>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	7afa      	ldrb	r2, [r7, #11]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d20b      	bcs.n	8004bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	607b      	str	r3, [r7, #4]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c14 <vPortValidateInterruptPriority+0x7c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bde:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <vPortValidateInterruptPriority+0x80>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d90b      	bls.n	8004bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	603b      	str	r3, [r7, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	e7fd      	b.n	8004bfa <vPortValidateInterruptPriority+0x62>
	}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000e3f0 	.word	0xe000e3f0
 8004c10:	20000df0 	.word	0x20000df0
 8004c14:	e000ed0c 	.word	0xe000ed0c
 8004c18:	20000df4 	.word	0x20000df4

08004c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	@ 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c28:	f7fe fd80 	bl	800372c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8004da0 <pvPortMalloc+0x184>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c34:	f000 f924 	bl	8004e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c38:	4b5a      	ldr	r3, [pc, #360]	@ (8004da4 <pvPortMalloc+0x188>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f040 8095 	bne.w	8004d70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01e      	beq.n	8004c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4413      	add	r3, r2
 8004c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d015      	beq.n	8004c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f023 0307 	bic.w	r3, r3, #7
 8004c64:	3308      	adds	r3, #8
 8004c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <pvPortMalloc+0x6e>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	617b      	str	r3, [r7, #20]
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	e7fd      	b.n	8004c86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d06f      	beq.n	8004d70 <pvPortMalloc+0x154>
 8004c90:	4b45      	ldr	r3, [pc, #276]	@ (8004da8 <pvPortMalloc+0x18c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d86a      	bhi.n	8004d70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c9a:	4b44      	ldr	r3, [pc, #272]	@ (8004dac <pvPortMalloc+0x190>)
 8004c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c9e:	4b43      	ldr	r3, [pc, #268]	@ (8004dac <pvPortMalloc+0x190>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ca4:	e004      	b.n	8004cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d903      	bls.n	8004cc2 <pvPortMalloc+0xa6>
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f1      	bne.n	8004ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cc2:	4b37      	ldr	r3, [pc, #220]	@ (8004da0 <pvPortMalloc+0x184>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d051      	beq.n	8004d70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	4413      	add	r3, r2
 8004cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	1ad2      	subs	r2, r2, r3
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d920      	bls.n	8004d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <pvPortMalloc+0xfc>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	613b      	str	r3, [r7, #16]
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d2a:	69b8      	ldr	r0, [r7, #24]
 8004d2c:	f000 f90a 	bl	8004f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d30:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <pvPortMalloc+0x18c>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <pvPortMalloc+0x18c>)
 8004d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004da8 <pvPortMalloc+0x18c>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b1b      	ldr	r3, [pc, #108]	@ (8004db0 <pvPortMalloc+0x194>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d4a:	4b17      	ldr	r3, [pc, #92]	@ (8004da8 <pvPortMalloc+0x18c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <pvPortMalloc+0x194>)
 8004d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	4b13      	ldr	r3, [pc, #76]	@ (8004da4 <pvPortMalloc+0x188>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d66:	4b13      	ldr	r3, [pc, #76]	@ (8004db4 <pvPortMalloc+0x198>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <pvPortMalloc+0x198>)
 8004d6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d70:	f7fe fcea 	bl	8003748 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <pvPortMalloc+0x17a>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60fb      	str	r3, [r7, #12]
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	e7fd      	b.n	8004d92 <pvPortMalloc+0x176>
	return pvReturn;
 8004d96:	69fb      	ldr	r3, [r7, #28]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	@ 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20004a00 	.word	0x20004a00
 8004da4:	20004a14 	.word	0x20004a14
 8004da8:	20004a04 	.word	0x20004a04
 8004dac:	200049f8 	.word	0x200049f8
 8004db0:	20004a08 	.word	0x20004a08
 8004db4:	20004a0c 	.word	0x20004a0c

08004db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d04f      	beq.n	8004e6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dca:	2308      	movs	r3, #8
 8004dcc:	425b      	negs	r3, r3
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	4b25      	ldr	r3, [pc, #148]	@ (8004e74 <vPortFree+0xbc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <vPortFree+0x46>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	60fb      	str	r3, [r7, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	e7fd      	b.n	8004dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <vPortFree+0x66>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60bb      	str	r3, [r7, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	4b14      	ldr	r3, [pc, #80]	@ (8004e74 <vPortFree+0xbc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01e      	beq.n	8004e6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d11a      	bne.n	8004e6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <vPortFree+0xbc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	401a      	ands	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e44:	f7fe fc72 	bl	800372c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e78 <vPortFree+0xc0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	4a09      	ldr	r2, [pc, #36]	@ (8004e78 <vPortFree+0xc0>)
 8004e54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e56:	6938      	ldr	r0, [r7, #16]
 8004e58:	f000 f874 	bl	8004f44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e5c:	4b07      	ldr	r3, [pc, #28]	@ (8004e7c <vPortFree+0xc4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	4a06      	ldr	r2, [pc, #24]	@ (8004e7c <vPortFree+0xc4>)
 8004e64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e66:	f7fe fc6f 	bl	8003748 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20004a14 	.word	0x20004a14
 8004e78:	20004a04 	.word	0x20004a04
 8004e7c:	20004a10 	.word	0x20004a10

08004e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e8c:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <prvHeapInit+0xac>)
 8004e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00c      	beq.n	8004eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0307 	bic.w	r3, r3, #7
 8004ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	4a1f      	ldr	r2, [pc, #124]	@ (8004f2c <prvHeapInit+0xac>)
 8004eb0:	4413      	add	r3, r2
 8004eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <prvHeapInit+0xb0>)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8004f30 <prvHeapInit+0xb0>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	4413      	add	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ecc:	2208      	movs	r2, #8
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0307 	bic.w	r3, r3, #7
 8004eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a15      	ldr	r2, [pc, #84]	@ (8004f34 <prvHeapInit+0xb4>)
 8004ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ee2:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <prvHeapInit+0xb4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004eea:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <prvHeapInit+0xb4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	1ad2      	subs	r2, r2, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f00:	4b0c      	ldr	r3, [pc, #48]	@ (8004f34 <prvHeapInit+0xb4>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f38 <prvHeapInit+0xb8>)
 8004f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4a09      	ldr	r2, [pc, #36]	@ (8004f3c <prvHeapInit+0xbc>)
 8004f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f18:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <prvHeapInit+0xc0>)
 8004f1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f1e:	601a      	str	r2, [r3, #0]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000df8 	.word	0x20000df8
 8004f30:	200049f8 	.word	0x200049f8
 8004f34:	20004a00 	.word	0x20004a00
 8004f38:	20004a08 	.word	0x20004a08
 8004f3c:	20004a04 	.word	0x20004a04
 8004f40:	20004a14 	.word	0x20004a14

08004f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f4c:	4b28      	ldr	r3, [pc, #160]	@ (8004ff0 <prvInsertBlockIntoFreeList+0xac>)
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e002      	b.n	8004f58 <prvInsertBlockIntoFreeList+0x14>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d8f7      	bhi.n	8004f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d108      	bne.n	8004f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	441a      	add	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	441a      	add	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d118      	bne.n	8004fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d00d      	beq.n	8004fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e008      	b.n	8004fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e003      	b.n	8004fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d002      	beq.n	8004fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	200049f8 	.word	0x200049f8
 8004ff4:	20004a00 	.word	0x20004a00

08004ff8 <memset>:
 8004ff8:	4402      	add	r2, r0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d100      	bne.n	8005002 <memset+0xa>
 8005000:	4770      	bx	lr
 8005002:	f803 1b01 	strb.w	r1, [r3], #1
 8005006:	e7f9      	b.n	8004ffc <memset+0x4>

08005008 <__libc_init_array>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4d0d      	ldr	r5, [pc, #52]	@ (8005040 <__libc_init_array+0x38>)
 800500c:	4c0d      	ldr	r4, [pc, #52]	@ (8005044 <__libc_init_array+0x3c>)
 800500e:	1b64      	subs	r4, r4, r5
 8005010:	10a4      	asrs	r4, r4, #2
 8005012:	2600      	movs	r6, #0
 8005014:	42a6      	cmp	r6, r4
 8005016:	d109      	bne.n	800502c <__libc_init_array+0x24>
 8005018:	4d0b      	ldr	r5, [pc, #44]	@ (8005048 <__libc_init_array+0x40>)
 800501a:	4c0c      	ldr	r4, [pc, #48]	@ (800504c <__libc_init_array+0x44>)
 800501c:	f000 f826 	bl	800506c <_init>
 8005020:	1b64      	subs	r4, r4, r5
 8005022:	10a4      	asrs	r4, r4, #2
 8005024:	2600      	movs	r6, #0
 8005026:	42a6      	cmp	r6, r4
 8005028:	d105      	bne.n	8005036 <__libc_init_array+0x2e>
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005030:	4798      	blx	r3
 8005032:	3601      	adds	r6, #1
 8005034:	e7ee      	b.n	8005014 <__libc_init_array+0xc>
 8005036:	f855 3b04 	ldr.w	r3, [r5], #4
 800503a:	4798      	blx	r3
 800503c:	3601      	adds	r6, #1
 800503e:	e7f2      	b.n	8005026 <__libc_init_array+0x1e>
 8005040:	080050f4 	.word	0x080050f4
 8005044:	080050f4 	.word	0x080050f4
 8005048:	080050f4 	.word	0x080050f4
 800504c:	080050f8 	.word	0x080050f8

08005050 <memcpy>:
 8005050:	440a      	add	r2, r1
 8005052:	4291      	cmp	r1, r2
 8005054:	f100 33ff 	add.w	r3, r0, #4294967295
 8005058:	d100      	bne.n	800505c <memcpy+0xc>
 800505a:	4770      	bx	lr
 800505c:	b510      	push	{r4, lr}
 800505e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005066:	4291      	cmp	r1, r2
 8005068:	d1f9      	bne.n	800505e <memcpy+0xe>
 800506a:	bd10      	pop	{r4, pc}

0800506c <_init>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr

08005078 <_fini>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr
